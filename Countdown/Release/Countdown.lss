
Countdown.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000131e  000013b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000131e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c2  00800154  00800154  00001406  2**0
                  ALLOC
  3 .stab         000083f4  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000b2ff  00000000  00000000  000097fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00014afb  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__vector_18>
      4c:	0c 94 a3 04 	jmp	0x946	; 0x946 <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <digital_pin_to_timer_PGM>:
      68:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      78:	00 00 00 00                                         ....

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
      c2:	5f 05       	cpc	r21, r15

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	11 e0       	ldi	r17, 0x01	; 1
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	ee e1       	ldi	r30, 0x1E	; 30
      d8:	f3 e1       	ldi	r31, 0x13	; 19
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a4 35       	cpi	r26, 0x54	; 84
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	12 e0       	ldi	r17, 0x02	; 2
      e8:	a4 e5       	ldi	r26, 0x54	; 84
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a6 31       	cpi	r26, 0x16	; 22
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c4 ec       	ldi	r28, 0xC4	; 196
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	22 97       	sbiw	r28, 0x02	; 2
     100:	fe 01       	movw	r30, r28
     102:	0e 94 17 09 	call	0x122e	; 0x122e <__tablejump__>
     106:	c2 3c       	cpi	r28, 0xC2	; 194
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 07 07 	call	0xe0e	; 0xe0e <main>
     110:	0c 94 8d 09 	jmp	0x131a	; 0x131a <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z6digit0v>:
int timer;
int ticker;
long randomNumber;

void digit0() {
	digitalWrite(disp_a, HIGH);
     118:	61 e0       	ldi	r22, 0x01	; 1
     11a:	83 e0       	ldi	r24, 0x03	; 3
     11c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_b, HIGH);
     120:	61 e0       	ldi	r22, 0x01	; 1
     122:	82 e0       	ldi	r24, 0x02	; 2
     124:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_c, HIGH);
     128:	61 e0       	ldi	r22, 0x01	; 1
     12a:	88 e0       	ldi	r24, 0x08	; 8
     12c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_d, HIGH);
     130:	61 e0       	ldi	r22, 0x01	; 1
     132:	87 e0       	ldi	r24, 0x07	; 7
     134:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_e, HIGH);
     138:	61 e0       	ldi	r22, 0x01	; 1
     13a:	86 e0       	ldi	r24, 0x06	; 6
     13c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_f, HIGH);
     140:	61 e0       	ldi	r22, 0x01	; 1
     142:	84 e0       	ldi	r24, 0x04	; 4
     144:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_g, LOW);
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	85 e0       	ldi	r24, 0x05	; 5
     14c:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

00000150 <_Z6digit1v>:
}

void digit1() {
	digitalWrite(disp_a, LOW);
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_b, HIGH);
     158:	61 e0       	ldi	r22, 0x01	; 1
     15a:	82 e0       	ldi	r24, 0x02	; 2
     15c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_c, HIGH);
     160:	61 e0       	ldi	r22, 0x01	; 1
     162:	88 e0       	ldi	r24, 0x08	; 8
     164:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_d, LOW);
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	87 e0       	ldi	r24, 0x07	; 7
     16c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_e, LOW);
     170:	60 e0       	ldi	r22, 0x00	; 0
     172:	86 e0       	ldi	r24, 0x06	; 6
     174:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_f, LOW);
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	84 e0       	ldi	r24, 0x04	; 4
     17c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_g, LOW);
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	85 e0       	ldi	r24, 0x05	; 5
     184:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

00000188 <_Z6digit2v>:
}

void digit2() {
	digitalWrite(disp_a, HIGH);
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	83 e0       	ldi	r24, 0x03	; 3
     18c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_b, HIGH);
     190:	61 e0       	ldi	r22, 0x01	; 1
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_c, LOW);
     198:	60 e0       	ldi	r22, 0x00	; 0
     19a:	88 e0       	ldi	r24, 0x08	; 8
     19c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_d, HIGH);
     1a0:	61 e0       	ldi	r22, 0x01	; 1
     1a2:	87 e0       	ldi	r24, 0x07	; 7
     1a4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_e, HIGH);
     1a8:	61 e0       	ldi	r22, 0x01	; 1
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_f, LOW);
     1b0:	60 e0       	ldi	r22, 0x00	; 0
     1b2:	84 e0       	ldi	r24, 0x04	; 4
     1b4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_g, HIGH);
     1b8:	61 e0       	ldi	r22, 0x01	; 1
     1ba:	85 e0       	ldi	r24, 0x05	; 5
     1bc:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

000001c0 <_Z6digit3v>:
}

void digit3() {
	digitalWrite(disp_a, HIGH);
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	83 e0       	ldi	r24, 0x03	; 3
     1c4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_b, HIGH);
     1c8:	61 e0       	ldi	r22, 0x01	; 1
     1ca:	82 e0       	ldi	r24, 0x02	; 2
     1cc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_c, HIGH);
     1d0:	61 e0       	ldi	r22, 0x01	; 1
     1d2:	88 e0       	ldi	r24, 0x08	; 8
     1d4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_d, HIGH);
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	87 e0       	ldi	r24, 0x07	; 7
     1dc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_e, LOW);
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	86 e0       	ldi	r24, 0x06	; 6
     1e4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_f, LOW);
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	84 e0       	ldi	r24, 0x04	; 4
     1ec:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_g, HIGH);
     1f0:	61 e0       	ldi	r22, 0x01	; 1
     1f2:	85 e0       	ldi	r24, 0x05	; 5
     1f4:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

000001f8 <_Z6digit4v>:
}

void digit4() {
	digitalWrite(disp_a, LOW);
     1f8:	60 e0       	ldi	r22, 0x00	; 0
     1fa:	83 e0       	ldi	r24, 0x03	; 3
     1fc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_b, HIGH);
     200:	61 e0       	ldi	r22, 0x01	; 1
     202:	82 e0       	ldi	r24, 0x02	; 2
     204:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_c, HIGH);
     208:	61 e0       	ldi	r22, 0x01	; 1
     20a:	88 e0       	ldi	r24, 0x08	; 8
     20c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_d, LOW);
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	87 e0       	ldi	r24, 0x07	; 7
     214:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_e, LOW);
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	86 e0       	ldi	r24, 0x06	; 6
     21c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_f, HIGH);
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	84 e0       	ldi	r24, 0x04	; 4
     224:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_g, HIGH);
     228:	61 e0       	ldi	r22, 0x01	; 1
     22a:	85 e0       	ldi	r24, 0x05	; 5
     22c:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

00000230 <_Z6digit5v>:
}

void digit5() {
	digitalWrite(disp_a, HIGH);
     230:	61 e0       	ldi	r22, 0x01	; 1
     232:	83 e0       	ldi	r24, 0x03	; 3
     234:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_b, LOW);
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_c, HIGH);
     240:	61 e0       	ldi	r22, 0x01	; 1
     242:	88 e0       	ldi	r24, 0x08	; 8
     244:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_d, HIGH);
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	87 e0       	ldi	r24, 0x07	; 7
     24c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_e, LOW);
     250:	60 e0       	ldi	r22, 0x00	; 0
     252:	86 e0       	ldi	r24, 0x06	; 6
     254:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_f, HIGH);
     258:	61 e0       	ldi	r22, 0x01	; 1
     25a:	84 e0       	ldi	r24, 0x04	; 4
     25c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_g, HIGH);
     260:	61 e0       	ldi	r22, 0x01	; 1
     262:	85 e0       	ldi	r24, 0x05	; 5
     264:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

00000268 <_Z6digit6v>:
}

void digit6() {
	digitalWrite(disp_a, HIGH);
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	83 e0       	ldi	r24, 0x03	; 3
     26c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_b, LOW);
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	82 e0       	ldi	r24, 0x02	; 2
     274:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_c, HIGH);
     278:	61 e0       	ldi	r22, 0x01	; 1
     27a:	88 e0       	ldi	r24, 0x08	; 8
     27c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_d, HIGH);
     280:	61 e0       	ldi	r22, 0x01	; 1
     282:	87 e0       	ldi	r24, 0x07	; 7
     284:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_e, HIGH);
     288:	61 e0       	ldi	r22, 0x01	; 1
     28a:	86 e0       	ldi	r24, 0x06	; 6
     28c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_f, HIGH);
     290:	61 e0       	ldi	r22, 0x01	; 1
     292:	84 e0       	ldi	r24, 0x04	; 4
     294:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_g, HIGH);
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	85 e0       	ldi	r24, 0x05	; 5
     29c:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

000002a0 <_Z6digit7v>:
}

void digit7() {
	digitalWrite(disp_a, HIGH);
     2a0:	61 e0       	ldi	r22, 0x01	; 1
     2a2:	83 e0       	ldi	r24, 0x03	; 3
     2a4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_b, HIGH);
     2a8:	61 e0       	ldi	r22, 0x01	; 1
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_c, HIGH);
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	88 e0       	ldi	r24, 0x08	; 8
     2b4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_d, LOW);
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	87 e0       	ldi	r24, 0x07	; 7
     2bc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_e, LOW);
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	86 e0       	ldi	r24, 0x06	; 6
     2c4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_f, LOW);
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	84 e0       	ldi	r24, 0x04	; 4
     2cc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_g, LOW);
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	85 e0       	ldi	r24, 0x05	; 5
     2d4:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

000002d8 <_Z6digit8v>:
}

void digit8() {
	digitalWrite(disp_a, HIGH);
     2d8:	61 e0       	ldi	r22, 0x01	; 1
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_b, HIGH);
     2e0:	61 e0       	ldi	r22, 0x01	; 1
     2e2:	82 e0       	ldi	r24, 0x02	; 2
     2e4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_c, HIGH);
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	88 e0       	ldi	r24, 0x08	; 8
     2ec:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_d, HIGH);
     2f0:	61 e0       	ldi	r22, 0x01	; 1
     2f2:	87 e0       	ldi	r24, 0x07	; 7
     2f4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_e, HIGH);
     2f8:	61 e0       	ldi	r22, 0x01	; 1
     2fa:	86 e0       	ldi	r24, 0x06	; 6
     2fc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_f, HIGH);
     300:	61 e0       	ldi	r22, 0x01	; 1
     302:	84 e0       	ldi	r24, 0x04	; 4
     304:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_g, HIGH);
     308:	61 e0       	ldi	r22, 0x01	; 1
     30a:	85 e0       	ldi	r24, 0x05	; 5
     30c:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

00000310 <_Z6digit9v>:
}

void digit9() {
	digitalWrite(disp_a, HIGH);
     310:	61 e0       	ldi	r22, 0x01	; 1
     312:	83 e0       	ldi	r24, 0x03	; 3
     314:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_b, HIGH);
     318:	61 e0       	ldi	r22, 0x01	; 1
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_c, HIGH);
     320:	61 e0       	ldi	r22, 0x01	; 1
     322:	88 e0       	ldi	r24, 0x08	; 8
     324:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_d, HIGH);
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	87 e0       	ldi	r24, 0x07	; 7
     32c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_e, LOW);
     330:	60 e0       	ldi	r22, 0x00	; 0
     332:	86 e0       	ldi	r24, 0x06	; 6
     334:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_f, HIGH);
     338:	61 e0       	ldi	r22, 0x01	; 1
     33a:	84 e0       	ldi	r24, 0x04	; 4
     33c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_g, HIGH);
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	85 e0       	ldi	r24, 0x05	; 5
     344:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

00000348 <_Z9showDigiti>:
}

void showDigit(int digit)

{
	switch (digit) {
     348:	84 30       	cpi	r24, 0x04	; 4
     34a:	91 05       	cpc	r25, r1
     34c:	31 f1       	breq	.+76     	; 0x39a <_Z9showDigiti+0x52>
     34e:	6c f4       	brge	.+26     	; 0x36a <_Z9showDigiti+0x22>
     350:	81 30       	cpi	r24, 0x01	; 1
     352:	91 05       	cpc	r25, r1
     354:	e1 f0       	breq	.+56     	; 0x38e <_Z9showDigiti+0x46>
     356:	1c f4       	brge	.+6      	; 0x35e <_Z9showDigiti+0x16>
     358:	89 2b       	or	r24, r25
     35a:	b9 f0       	breq	.+46     	; 0x38a <_Z9showDigiti+0x42>
     35c:	08 95       	ret
     35e:	82 30       	cpi	r24, 0x02	; 2
     360:	91 05       	cpc	r25, r1
     362:	b9 f0       	breq	.+46     	; 0x392 <_Z9showDigiti+0x4a>
     364:	03 97       	sbiw	r24, 0x03	; 3
     366:	29 f5       	brne	.+74     	; 0x3b2 <_Z9showDigiti+0x6a>
     368:	16 c0       	rjmp	.+44     	; 0x396 <_Z9showDigiti+0x4e>
     36a:	87 30       	cpi	r24, 0x07	; 7
     36c:	91 05       	cpc	r25, r1
     36e:	d9 f0       	breq	.+54     	; 0x3a6 <_Z9showDigiti+0x5e>
     370:	34 f4       	brge	.+12     	; 0x37e <_Z9showDigiti+0x36>
     372:	85 30       	cpi	r24, 0x05	; 5
     374:	91 05       	cpc	r25, r1
     376:	99 f0       	breq	.+38     	; 0x39e <_Z9showDigiti+0x56>
     378:	06 97       	sbiw	r24, 0x06	; 6
     37a:	d9 f4       	brne	.+54     	; 0x3b2 <_Z9showDigiti+0x6a>
     37c:	12 c0       	rjmp	.+36     	; 0x3a2 <_Z9showDigiti+0x5a>
     37e:	88 30       	cpi	r24, 0x08	; 8
     380:	91 05       	cpc	r25, r1
     382:	99 f0       	breq	.+38     	; 0x3aa <_Z9showDigiti+0x62>
     384:	09 97       	sbiw	r24, 0x09	; 9
     386:	a9 f4       	brne	.+42     	; 0x3b2 <_Z9showDigiti+0x6a>
     388:	12 c0       	rjmp	.+36     	; 0x3ae <_Z9showDigiti+0x66>
	case 0:
		digit0();
     38a:	0c 94 8c 00 	jmp	0x118	; 0x118 <_Z6digit0v>
		break;
	case 1:
		digit1();
     38e:	0c 94 a8 00 	jmp	0x150	; 0x150 <_Z6digit1v>
		break;
	case 2:
		digit2();
     392:	0c 94 c4 00 	jmp	0x188	; 0x188 <_Z6digit2v>
		break;
	case 3:
		digit3();
     396:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_Z6digit3v>
		break;
	case 4:
		digit4();
     39a:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_Z6digit4v>
		break;
	case 5:
		digit5();
     39e:	0c 94 18 01 	jmp	0x230	; 0x230 <_Z6digit5v>
		break;
	case 6:
		digit6();
     3a2:	0c 94 34 01 	jmp	0x268	; 0x268 <_Z6digit6v>
		break;
	case 7:
		digit7();
     3a6:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_Z6digit7v>
		break;
	case 8:
		digit8();
     3aa:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <_Z6digit8v>
		break;
	case 9:
		digit9();
     3ae:	0c 94 88 01 	jmp	0x310	; 0x310 <_Z6digit9v>
     3b2:	08 95       	ret

000003b4 <_Z6beepOnv>:
	};

}

void beepOn() {
	beep = true;
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 62 01 	sts	0x0162, r24
	digitalWrite(buzz, HIGH);
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	89 e0       	ldi	r24, 0x09	; 9
     3be:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(led1, HIGH);
     3c2:	61 e0       	ldi	r22, 0x01	; 1
     3c4:	8a e0       	ldi	r24, 0x0A	; 10
     3c6:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

000003ca <_Z7beepOffv>:
}

void beepOff() {
	beep = false;
     3ca:	10 92 62 01 	sts	0x0162, r1
	digitalWrite(buzz, LOW);
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	89 e0       	ldi	r24, 0x09	; 9
     3d2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(led1, LOW);
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	8a e0       	ldi	r24, 0x0A	; 10
     3da:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

000003de <setup>:
}

void setup()

{
	pinMode(disp_a, OUTPUT);
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	0e 94 34 08 	call	0x1068	; 0x1068 <pinMode>
	pinMode(disp_b, OUTPUT);
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	0e 94 34 08 	call	0x1068	; 0x1068 <pinMode>
	pinMode(disp_c, OUTPUT);
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	88 e0       	ldi	r24, 0x08	; 8
     3f2:	0e 94 34 08 	call	0x1068	; 0x1068 <pinMode>
	pinMode(disp_d, OUTPUT);
     3f6:	61 e0       	ldi	r22, 0x01	; 1
     3f8:	87 e0       	ldi	r24, 0x07	; 7
     3fa:	0e 94 34 08 	call	0x1068	; 0x1068 <pinMode>
	pinMode(disp_e, OUTPUT);
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	86 e0       	ldi	r24, 0x06	; 6
     402:	0e 94 34 08 	call	0x1068	; 0x1068 <pinMode>
	pinMode(disp_f, OUTPUT);
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	84 e0       	ldi	r24, 0x04	; 4
     40a:	0e 94 34 08 	call	0x1068	; 0x1068 <pinMode>
	pinMode(disp_g, OUTPUT);
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	85 e0       	ldi	r24, 0x05	; 5
     412:	0e 94 34 08 	call	0x1068	; 0x1068 <pinMode>

	pinMode(buzz, OUTPUT);
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	89 e0       	ldi	r24, 0x09	; 9
     41a:	0e 94 34 08 	call	0x1068	; 0x1068 <pinMode>
	pinMode(led1, OUTPUT);
     41e:	61 e0       	ldi	r22, 0x01	; 1
     420:	8a e0       	ldi	r24, 0x0A	; 10
     422:	0e 94 34 08 	call	0x1068	; 0x1068 <pinMode>
	pinMode(led2, OUTPUT);
     426:	61 e0       	ldi	r22, 0x01	; 1
     428:	8b e0       	ldi	r24, 0x0B	; 11
     42a:	0e 94 34 08 	call	0x1068	; 0x1068 <pinMode>

	pinMode(push1, INPUT);
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	8c e0       	ldi	r24, 0x0C	; 12
     432:	0e 94 34 08 	call	0x1068	; 0x1068 <pinMode>
	pinMode(push2, INPUT);
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	8d e0       	ldi	r24, 0x0D	; 13
     43a:	0e 94 34 08 	call	0x1068	; 0x1068 <pinMode>

	timer = 9;
     43e:	89 e0       	ldi	r24, 0x09	; 9
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	90 93 5b 01 	sts	0x015B, r25
     446:	80 93 5a 01 	sts	0x015A, r24
	ticker = 0;
     44a:	10 92 59 01 	sts	0x0159, r1
     44e:	10 92 58 01 	sts	0x0158, r1
	armed = false;
     452:	10 92 60 01 	sts	0x0160, r1
	beep = false;
     456:	10 92 62 01 	sts	0x0162, r1
	boom = false;
     45a:	10 92 61 01 	sts	0x0161, r1
	btn1State = 0;
     45e:	10 92 5f 01 	sts	0x015F, r1
     462:	10 92 5e 01 	sts	0x015E, r1
	btn2State = 0;
     466:	10 92 5d 01 	sts	0x015D, r1
     46a:	10 92 5c 01 	sts	0x015C, r1

	Serial.begin(9600);
     46e:	40 e8       	ldi	r20, 0x80	; 128
     470:	55 e2       	ldi	r21, 0x25	; 37
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	83 e6       	ldi	r24, 0x63	; 99
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 de 04 	call	0x9bc	; 0x9bc <_ZN14HardwareSerial5beginEm>
	randomSeed(analogRead(0));
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <analogRead>
     484:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <_Z10randomSeedj>

00000488 <_Z5cleanv>:
}

void clean() {
	digitalWrite(disp_a, LOW);
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	83 e0       	ldi	r24, 0x03	; 3
     48c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_b, LOW);
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_c, LOW);
     498:	60 e0       	ldi	r22, 0x00	; 0
     49a:	88 e0       	ldi	r24, 0x08	; 8
     49c:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_d, LOW);
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	87 e0       	ldi	r24, 0x07	; 7
     4a4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_e, LOW);
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	86 e0       	ldi	r24, 0x06	; 6
     4ac:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_f, LOW);
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	84 e0       	ldi	r24, 0x04	; 4
     4b4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(disp_g, LOW);
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	85 e0       	ldi	r24, 0x05	; 5
     4bc:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(buzz, LOW);
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	89 e0       	ldi	r24, 0x09	; 9
     4c4:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(led2, LOW);
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	8b e0       	ldi	r24, 0x0B	; 11
     4cc:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

000004d0 <_Z6boomOnv>:
}

void boomOn() {
	boom = true;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	80 93 61 01 	sts	0x0161, r24
void showDigit(int digit)

{
	switch (digit) {
	case 0:
		digit0();
     4d6:	0e 94 8c 00 	call	0x118	; 0x118 <_Z6digit0v>
}

void boomOn() {
	boom = true;
	showDigit(0);
	digitalWrite(buzz, HIGH);
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	89 e0       	ldi	r24, 0x09	; 9
     4de:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(led2, HIGH);
     4e2:	61 e0       	ldi	r22, 0x01	; 1
     4e4:	8b e0       	ldi	r24, 0x0B	; 11
     4e6:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

000004ea <_Z7boomOffv>:
}

void boomOff() {
	boom = false;
     4ea:	10 92 61 01 	sts	0x0161, r1
	digitalWrite(buzz, LOW);
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	89 e0       	ldi	r24, 0x09	; 9
     4f2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
	digitalWrite(led2, LOW);
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	8b e0       	ldi	r24, 0x0B	; 11
     4fa:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>

000004fe <_Z6desarmv>:
}

void desarm() {
	armed = false;
     4fe:	10 92 60 01 	sts	0x0160, r1
	clean();
     502:	0e 94 44 02 	call	0x488	; 0x488 <_Z5cleanv>
	digitalWrite(buzz, LOW);
	digitalWrite(led1, LOW);
}

void resetTicker() {
	ticker = 0;
     506:	10 92 59 01 	sts	0x0159, r1
     50a:	10 92 58 01 	sts	0x0158, r1
}

void resetTimer() {
	timer = 9;
     50e:	89 e0       	ldi	r24, 0x09	; 9
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	90 93 5b 01 	sts	0x015B, r25
     516:	80 93 5a 01 	sts	0x015A, r24
     51a:	08 95       	ret

0000051c <_Z7armBombv>:
	resetTicker();
	resetTimer();
}

void armBomb() {
	armed = true;
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	80 93 60 01 	sts	0x0160, r24
	clean();
     522:	0e 94 44 02 	call	0x488	; 0x488 <_Z5cleanv>
void resetTicker() {
	ticker = 0;
}

void resetTimer() {
	timer = 9;
     526:	89 e0       	ldi	r24, 0x09	; 9
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	90 93 5b 01 	sts	0x015B, r25
     52e:	80 93 5a 01 	sts	0x015A, r24
	digitalWrite(buzz, LOW);
	digitalWrite(led1, LOW);
}

void resetTicker() {
	ticker = 0;
     532:	10 92 59 01 	sts	0x0159, r1
     536:	10 92 58 01 	sts	0x0158, r1
     53a:	08 95       	ret

0000053c <_Z10armedStatev>:
	resetTimer();
	resetTicker();
}

void armedState() {
	if (boom) {
     53c:	80 91 61 01 	lds	r24, 0x0161
     540:	88 23       	and	r24, r24
     542:	89 f0       	breq	.+34     	; 0x566 <_Z10armedStatev+0x2a>
		if (ticker == 45) {
     544:	80 91 58 01 	lds	r24, 0x0158
     548:	90 91 59 01 	lds	r25, 0x0159
     54c:	8d 97       	sbiw	r24, 0x2d	; 45
     54e:	09 f0       	breq	.+2      	; 0x552 <_Z10armedStatev+0x16>
     550:	47 c0       	rjmp	.+142    	; 0x5e0 <_Z10armedStatev+0xa4>
			Serial.println("Armando Bomba!");
     552:	65 e0       	ldi	r22, 0x05	; 5
     554:	71 e0       	ldi	r23, 0x01	; 1
     556:	83 e6       	ldi	r24, 0x63	; 99
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN5Print7printlnEPKc>
			boomOff();
     55e:	0e 94 75 02 	call	0x4ea	; 0x4ea <_Z7boomOffv>
			desarm();
     562:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <_Z6desarmv>
		}
	} else {
		if (timer >= 0) {
     566:	60 91 5a 01 	lds	r22, 0x015A
     56a:	70 91 5b 01 	lds	r23, 0x015B
     56e:	77 fd       	sbrc	r23, 7
     570:	35 c0       	rjmp	.+106    	; 0x5dc <_Z10armedStatev+0xa0>
			if (ticker >= 9) {
     572:	80 91 58 01 	lds	r24, 0x0158
     576:	90 91 59 01 	lds	r25, 0x0159
     57a:	89 30       	cpi	r24, 0x09	; 9
     57c:	91 05       	cpc	r25, r1
     57e:	34 f1       	brlt	.+76     	; 0x5cc <_Z10armedStatev+0x90>
				Serial.print(timer);
     580:	4a e0       	ldi	r20, 0x0A	; 10
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	83 e6       	ldi	r24, 0x63	; 99
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 cb 06 	call	0xd96	; 0xd96 <_ZN5Print5printEii>
				showDigit(timer);
     58c:	80 91 5a 01 	lds	r24, 0x015A
     590:	90 91 5b 01 	lds	r25, 0x015B
     594:	0e 94 a4 01 	call	0x348	; 0x348 <_Z9showDigiti>
				if(timer == 0){
     598:	80 91 5a 01 	lds	r24, 0x015A
     59c:	90 91 5b 01 	lds	r25, 0x015B
     5a0:	89 2b       	or	r24, r25
     5a2:	21 f4       	brne	.+8      	; 0x5ac <_Z10armedStatev+0x70>
					Serial.println();
     5a4:	83 e6       	ldi	r24, 0x63	; 99
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN5Print7printlnEv>
				}
				beepOn();
     5ac:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_Z6beepOnv>
	digitalWrite(buzz, LOW);
	digitalWrite(led1, LOW);
}

void resetTicker() {
	ticker = 0;
     5b0:	10 92 59 01 	sts	0x0159, r1
     5b4:	10 92 58 01 	sts	0x0158, r1
				if(timer == 0){
					Serial.println();
				}
				beepOn();
				resetTicker();
				timer--;
     5b8:	80 91 5a 01 	lds	r24, 0x015A
     5bc:	90 91 5b 01 	lds	r25, 0x015B
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	90 93 5b 01 	sts	0x015B, r25
     5c6:	80 93 5a 01 	sts	0x015A, r24
     5ca:	08 95       	ret
			} else {
				if (ticker >= 5 && beep) {
     5cc:	05 97       	sbiw	r24, 0x05	; 5
     5ce:	44 f0       	brlt	.+16     	; 0x5e0 <_Z10armedStatev+0xa4>
     5d0:	80 91 62 01 	lds	r24, 0x0162
     5d4:	88 23       	and	r24, r24
     5d6:	21 f0       	breq	.+8      	; 0x5e0 <_Z10armedStatev+0xa4>
					beepOff();
     5d8:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <_Z7beepOffv>
				}
			}
		} else {
			boomOn();
     5dc:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <_Z6boomOnv>
     5e0:	08 95       	ret

000005e2 <_Z3lapv>:
		}
	}
}

void lap() {
	if (ticker == 0) {
     5e2:	80 91 58 01 	lds	r24, 0x0158
     5e6:	90 91 59 01 	lds	r25, 0x0159
     5ea:	00 97       	sbiw	r24, 0x00	; 0
     5ec:	39 f4       	brne	.+14     	; 0x5fc <_Z3lapv+0x1a>
		digitalWrite(disp_f, LOW);
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	84 e0       	ldi	r24, 0x04	; 4
     5f2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
		digitalWrite(disp_a, HIGH);
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	83 e0       	ldi	r24, 0x03	; 3
     5fa:	27 c0       	rjmp	.+78     	; 0x64a <_Z3lapv+0x68>
	} else if (ticker == 1) {
     5fc:	81 30       	cpi	r24, 0x01	; 1
     5fe:	91 05       	cpc	r25, r1
     600:	39 f4       	brne	.+14     	; 0x610 <_Z3lapv+0x2e>
		digitalWrite(disp_a, LOW);
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	83 e0       	ldi	r24, 0x03	; 3
     606:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
		digitalWrite(disp_b, HIGH);
     60a:	61 e0       	ldi	r22, 0x01	; 1
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	1d c0       	rjmp	.+58     	; 0x64a <_Z3lapv+0x68>
	} else if (ticker == 2) {
     610:	82 30       	cpi	r24, 0x02	; 2
     612:	91 05       	cpc	r25, r1
     614:	39 f4       	brne	.+14     	; 0x624 <_Z3lapv+0x42>
		digitalWrite(disp_b, LOW);
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
		digitalWrite(disp_c, HIGH);
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	88 e0       	ldi	r24, 0x08	; 8
     622:	13 c0       	rjmp	.+38     	; 0x64a <_Z3lapv+0x68>
	} else if (ticker == 3) {
     624:	83 30       	cpi	r24, 0x03	; 3
     626:	91 05       	cpc	r25, r1
     628:	39 f4       	brne	.+14     	; 0x638 <_Z3lapv+0x56>
		digitalWrite(disp_c, LOW);
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	88 e0       	ldi	r24, 0x08	; 8
     62e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
		digitalWrite(disp_d, HIGH);
     632:	61 e0       	ldi	r22, 0x01	; 1
     634:	87 e0       	ldi	r24, 0x07	; 7
     636:	09 c0       	rjmp	.+18     	; 0x64a <_Z3lapv+0x68>
	} else if (ticker == 4) {
     638:	84 30       	cpi	r24, 0x04	; 4
     63a:	91 05       	cpc	r25, r1
     63c:	41 f4       	brne	.+16     	; 0x64e <_Z3lapv+0x6c>
		digitalWrite(disp_d, LOW);
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	87 e0       	ldi	r24, 0x07	; 7
     642:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
		digitalWrite(disp_e, HIGH);
     646:	61 e0       	ldi	r22, 0x01	; 1
     648:	86 e0       	ldi	r24, 0x06	; 6
     64a:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <digitalWrite>
	} else if (ticker == 5) {
     64e:	05 97       	sbiw	r24, 0x05	; 5
     650:	71 f4       	brne	.+28     	; 0x66e <_Z3lapv+0x8c>
		digitalWrite(disp_e, LOW);
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	86 e0       	ldi	r24, 0x06	; 6
     656:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
		digitalWrite(disp_f, HIGH);
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	84 e0       	ldi	r24, 0x04	; 4
     65e:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <digitalWrite>
		ticker = -1;
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	9f ef       	ldi	r25, 0xFF	; 255
     666:	90 93 59 01 	sts	0x0159, r25
     66a:	80 93 58 01 	sts	0x0158, r24
     66e:	08 95       	ret

00000670 <_Z7triggerv>:
	}
}

void trigger() {
	if (btn1State == HIGH || btn2State == HIGH) {
     670:	80 91 5e 01 	lds	r24, 0x015E
     674:	90 91 5f 01 	lds	r25, 0x015F
     678:	81 30       	cpi	r24, 0x01	; 1
     67a:	91 05       	cpc	r25, r1
     67c:	41 f0       	breq	.+16     	; 0x68e <_Z7triggerv+0x1e>
     67e:	20 91 5c 01 	lds	r18, 0x015C
     682:	30 91 5d 01 	lds	r19, 0x015D
     686:	21 30       	cpi	r18, 0x01	; 1
     688:	31 05       	cpc	r19, r1
     68a:	09 f0       	breq	.+2      	; 0x68e <_Z7triggerv+0x1e>
     68c:	46 c0       	rjmp	.+140    	; 0x71a <_Z7triggerv+0xaa>
		if (!armed) {
     68e:	20 91 60 01 	lds	r18, 0x0160
     692:	21 11       	cpse	r18, r1
     694:	0a c0       	rjmp	.+20     	; 0x6aa <_Z7triggerv+0x3a>
			delay(50);
     696:	62 e3       	ldi	r22, 0x32	; 50
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 88 07 	call	0xf10	; 0xf10 <delay>
			boomOff();
     6a2:	0e 94 75 02 	call	0x4ea	; 0x4ea <_Z7boomOffv>
			armBomb();
     6a6:	0c 94 8e 02 	jmp	0x51c	; 0x51c <_Z7armBombv>
		} else {
			if (randomNumber % 2 == 0) {
     6aa:	20 91 54 01 	lds	r18, 0x0154
     6ae:	20 fd       	sbrc	r18, 0
     6b0:	0e c0       	rjmp	.+28     	; 0x6ce <_Z7triggerv+0x5e>
				if (btn1State == HIGH) {
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	19 f4       	brne	.+6      	; 0x6bc <_Z7triggerv+0x4c>
					Serial.println("Desarmando1");
     6b6:	64 e1       	ldi	r22, 0x14	; 20
     6b8:	71 e0       	ldi	r23, 0x01	; 1
     6ba:	12 c0       	rjmp	.+36     	; 0x6e0 <_Z7triggerv+0x70>
					resetTimer();
					desarm();
					delay(50);
				} else if (btn2State == HIGH) {
     6bc:	80 91 5c 01 	lds	r24, 0x015C
     6c0:	90 91 5d 01 	lds	r25, 0x015D
     6c4:	01 97       	sbiw	r24, 0x01	; 1
     6c6:	49 f5       	brne	.+82     	; 0x71a <_Z7triggerv+0xaa>
					Serial.println("Explodindo1");
     6c8:	60 e2       	ldi	r22, 0x20	; 32
     6ca:	71 e0       	ldi	r23, 0x01	; 1
     6cc:	1a c0       	rjmp	.+52     	; 0x702 <_Z7triggerv+0x92>
					boomOn();
					delay(50);
				}
			} else {
				if (btn2State == HIGH) {
     6ce:	20 91 5c 01 	lds	r18, 0x015C
     6d2:	30 91 5d 01 	lds	r19, 0x015D
     6d6:	21 30       	cpi	r18, 0x01	; 1
     6d8:	31 05       	cpc	r19, r1
     6da:	79 f4       	brne	.+30     	; 0x6fa <_Z7triggerv+0x8a>
					Serial.println("Desarmando2");
     6dc:	6c e2       	ldi	r22, 0x2C	; 44
     6de:	71 e0       	ldi	r23, 0x01	; 1
     6e0:	83 e6       	ldi	r24, 0x63	; 99
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN5Print7printlnEPKc>
void resetTicker() {
	ticker = 0;
}

void resetTimer() {
	timer = 9;
     6e8:	89 e0       	ldi	r24, 0x09	; 9
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	90 93 5b 01 	sts	0x015B, r25
     6f0:	80 93 5a 01 	sts	0x015A, r24
				}
			} else {
				if (btn2State == HIGH) {
					Serial.println("Desarmando2");
					resetTimer();
					desarm();
     6f4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_Z6desarmv>
     6f8:	0a c0       	rjmp	.+20     	; 0x70e <_Z7triggerv+0x9e>
					delay(50);
				} else if (btn1State == HIGH) {
     6fa:	01 97       	sbiw	r24, 0x01	; 1
     6fc:	71 f4       	brne	.+28     	; 0x71a <_Z7triggerv+0xaa>
					Serial.println("Explodindo2");
     6fe:	68 e3       	ldi	r22, 0x38	; 56
     700:	71 e0       	ldi	r23, 0x01	; 1
     702:	83 e6       	ldi	r24, 0x63	; 99
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 10 06 	call	0xc20	; 0xc20 <_ZN5Print7printlnEPKc>
					boomOn();
     70a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <_Z6boomOnv>
					delay(50);
     70e:	62 e3       	ldi	r22, 0x32	; 50
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0c 94 88 07 	jmp	0xf10	; 0xf10 <delay>
     71a:	08 95       	ret

0000071c <loop>:
		}
	}
}

void loop() {
	randomNumber = random(300);
     71c:	6c e2       	ldi	r22, 0x2C	; 44
     71e:	71 e0       	ldi	r23, 0x01	; 1
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_Z6randoml>
     728:	60 93 54 01 	sts	0x0154, r22
     72c:	70 93 55 01 	sts	0x0155, r23
     730:	80 93 56 01 	sts	0x0156, r24
     734:	90 93 57 01 	sts	0x0157, r25
	btn1State = digitalRead(push1);
     738:	8c e0       	ldi	r24, 0x0C	; 12
     73a:	0e 94 a3 08 	call	0x1146	; 0x1146 <digitalRead>
     73e:	90 93 5f 01 	sts	0x015F, r25
     742:	80 93 5e 01 	sts	0x015E, r24
	btn2State = digitalRead(push2);
     746:	8d e0       	ldi	r24, 0x0D	; 13
     748:	0e 94 a3 08 	call	0x1146	; 0x1146 <digitalRead>
     74c:	90 93 5d 01 	sts	0x015D, r25
     750:	80 93 5c 01 	sts	0x015C, r24

	trigger();
     754:	0e 94 38 03 	call	0x670	; 0x670 <_Z7triggerv>

	if (armed) {
     758:	80 91 60 01 	lds	r24, 0x0160
     75c:	88 23       	and	r24, r24
     75e:	19 f0       	breq	.+6      	; 0x766 <loop+0x4a>
		armedState();
     760:	0e 94 9e 02 	call	0x53c	; 0x53c <_Z10armedStatev>
     764:	02 c0       	rjmp	.+4      	; 0x76a <loop+0x4e>
	} else {
		lap();
     766:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_Z3lapv>
	}
	ticker++;
     76a:	80 91 58 01 	lds	r24, 0x0158
     76e:	90 91 59 01 	lds	r25, 0x0159
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	90 93 59 01 	sts	0x0159, r25
     778:	80 93 58 01 	sts	0x0158, r24
	delay(100);
     77c:	64 e6       	ldi	r22, 0x64	; 100
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0c 94 88 07 	jmp	0xf10	; 0xf10 <delay>

00000788 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     788:	fc 01       	movw	r30, r24
     78a:	84 85       	ldd	r24, Z+12	; 0x0c
     78c:	95 85       	ldd	r25, Z+13	; 0x0d
     78e:	fc 01       	movw	r30, r24
     790:	e0 5c       	subi	r30, 0xC0	; 192
     792:	ff 4f       	sbci	r31, 0xFF	; 255
     794:	20 81       	ld	r18, Z
     796:	31 81       	ldd	r19, Z+1	; 0x01
     798:	fc 01       	movw	r30, r24
     79a:	ee 5b       	subi	r30, 0xBE	; 190
     79c:	ff 4f       	sbci	r31, 0xFF	; 255
     79e:	80 81       	ld	r24, Z
     7a0:	91 81       	ldd	r25, Z+1	; 0x01
     7a2:	28 1b       	sub	r18, r24
     7a4:	39 0b       	sbc	r19, r25
     7a6:	2f 73       	andi	r18, 0x3F	; 63
     7a8:	33 27       	eor	r19, r19
}
     7aa:	c9 01       	movw	r24, r18
     7ac:	08 95       	ret

000007ae <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     7ae:	fc 01       	movw	r30, r24
     7b0:	84 85       	ldd	r24, Z+12	; 0x0c
     7b2:	95 85       	ldd	r25, Z+13	; 0x0d
     7b4:	fc 01       	movw	r30, r24
     7b6:	e0 5c       	subi	r30, 0xC0	; 192
     7b8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ba:	40 81       	ld	r20, Z
     7bc:	51 81       	ldd	r21, Z+1	; 0x01
     7be:	fc 01       	movw	r30, r24
     7c0:	ee 5b       	subi	r30, 0xBE	; 190
     7c2:	ff 4f       	sbci	r31, 0xFF	; 255
     7c4:	20 81       	ld	r18, Z
     7c6:	31 81       	ldd	r19, Z+1	; 0x01
     7c8:	42 17       	cp	r20, r18
     7ca:	53 07       	cpc	r21, r19
     7cc:	41 f0       	breq	.+16     	; 0x7de <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     7ce:	01 90       	ld	r0, Z+
     7d0:	f0 81       	ld	r31, Z
     7d2:	e0 2d       	mov	r30, r0
     7d4:	e8 0f       	add	r30, r24
     7d6:	f9 1f       	adc	r31, r25
     7d8:	20 81       	ld	r18, Z
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     7de:	2f ef       	ldi	r18, 0xFF	; 255
     7e0:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     7e2:	c9 01       	movw	r24, r18
     7e4:	08 95       	ret

000007e6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     7e6:	fc 01       	movw	r30, r24
     7e8:	84 85       	ldd	r24, Z+12	; 0x0c
     7ea:	95 85       	ldd	r25, Z+13	; 0x0d
     7ec:	fc 01       	movw	r30, r24
     7ee:	e0 5c       	subi	r30, 0xC0	; 192
     7f0:	ff 4f       	sbci	r31, 0xFF	; 255
     7f2:	40 81       	ld	r20, Z
     7f4:	51 81       	ldd	r21, Z+1	; 0x01
     7f6:	fc 01       	movw	r30, r24
     7f8:	ee 5b       	subi	r30, 0xBE	; 190
     7fa:	ff 4f       	sbci	r31, 0xFF	; 255
     7fc:	20 81       	ld	r18, Z
     7fe:	31 81       	ldd	r19, Z+1	; 0x01
     800:	42 17       	cp	r20, r18
     802:	53 07       	cpc	r21, r19
     804:	81 f0       	breq	.+32     	; 0x826 <_ZN14HardwareSerial4readEv+0x40>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     806:	a0 81       	ld	r26, Z
     808:	b1 81       	ldd	r27, Z+1	; 0x01
     80a:	a8 0f       	add	r26, r24
     80c:	b9 1f       	adc	r27, r25
     80e:	8c 91       	ld	r24, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     810:	20 81       	ld	r18, Z
     812:	31 81       	ldd	r19, Z+1	; 0x01
     814:	2f 5f       	subi	r18, 0xFF	; 255
     816:	3f 4f       	sbci	r19, 0xFF	; 255
     818:	2f 73       	andi	r18, 0x3F	; 63
     81a:	33 27       	eor	r19, r19
     81c:	31 83       	std	Z+1, r19	; 0x01
     81e:	20 83       	st	Z, r18
    return c;
     820:	28 2f       	mov	r18, r24
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	02 c0       	rjmp	.+4      	; 0x82a <_ZN14HardwareSerial4readEv+0x44>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     826:	2f ef       	ldi	r18, 0xFF	; 255
     828:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     82a:	c9 01       	movw	r24, r18
     82c:	08 95       	ret

0000082e <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
     82e:	fc 01       	movw	r30, r24
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
     830:	81 a1       	ldd	r24, Z+33	; 0x21
     832:	88 23       	and	r24, r24
     834:	29 f0       	breq	.+10     	; 0x840 <_ZN14HardwareSerial5flushEv+0x12>
     836:	a4 89       	ldd	r26, Z+20	; 0x14
     838:	b5 89       	ldd	r27, Z+21	; 0x15
     83a:	8c 91       	ld	r24, X
     83c:	86 ff       	sbrs	r24, 6
     83e:	fb cf       	rjmp	.-10     	; 0x836 <_ZN14HardwareSerial5flushEv+0x8>
  transmitting = false;
     840:	11 a2       	std	Z+33, r1	; 0x21
     842:	08 95       	ret

00000844 <_ZN14HardwareSerial5writeEh>:
}

size_t HardwareSerial::write(uint8_t c)
{
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	fc 01       	movw	r30, r24
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     84a:	26 85       	ldd	r18, Z+14	; 0x0e
     84c:	37 85       	ldd	r19, Z+15	; 0x0f
     84e:	d9 01       	movw	r26, r18
     850:	a0 5c       	subi	r26, 0xC0	; 192
     852:	bf 4f       	sbci	r27, 0xFF	; 255
     854:	8d 91       	ld	r24, X+
     856:	9c 91       	ld	r25, X
     858:	11 97       	sbiw	r26, 0x01	; 1
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	8f 73       	andi	r24, 0x3F	; 63
     85e:	99 27       	eor	r25, r25
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     860:	e9 01       	movw	r28, r18
     862:	ce 5b       	subi	r28, 0xBE	; 190
     864:	df 4f       	sbci	r29, 0xFF	; 255
     866:	48 81       	ld	r20, Y
     868:	59 81       	ldd	r21, Y+1	; 0x01
     86a:	84 17       	cp	r24, r20
     86c:	95 07       	cpc	r25, r21
     86e:	d9 f3       	breq	.-10     	; 0x866 <_ZN14HardwareSerial5writeEh+0x22>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     870:	0d 90       	ld	r0, X+
     872:	bc 91       	ld	r27, X
     874:	a0 2d       	mov	r26, r0
     876:	a2 0f       	add	r26, r18
     878:	b3 1f       	adc	r27, r19
     87a:	6c 93       	st	X, r22
  _tx_buffer->head = i;
     87c:	a6 85       	ldd	r26, Z+14	; 0x0e
     87e:	b7 85       	ldd	r27, Z+15	; 0x0f
     880:	a0 5c       	subi	r26, 0xC0	; 192
     882:	bf 4f       	sbci	r27, 0xFF	; 255
     884:	11 96       	adiw	r26, 0x01	; 1
     886:	9c 93       	st	X, r25
     888:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
     88a:	a6 89       	ldd	r26, Z+22	; 0x16
     88c:	b7 89       	ldd	r27, Z+23	; 0x17
     88e:	2c 91       	ld	r18, X
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	07 8c       	ldd	r0, Z+31	; 0x1f
     896:	02 c0       	rjmp	.+4      	; 0x89c <_ZN14HardwareSerial5writeEh+0x58>
     898:	88 0f       	add	r24, r24
     89a:	99 1f       	adc	r25, r25
     89c:	0a 94       	dec	r0
     89e:	e2 f7       	brpl	.-8      	; 0x898 <_ZN14HardwareSerial5writeEh+0x54>
     8a0:	28 2b       	or	r18, r24
     8a2:	2c 93       	st	X, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	81 a3       	std	Z+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
     8a8:	04 88       	ldd	r0, Z+20	; 0x14
     8aa:	f5 89       	ldd	r31, Z+21	; 0x15
     8ac:	e0 2d       	mov	r30, r0
     8ae:	80 81       	ld	r24, Z
     8b0:	80 64       	ori	r24, 0x40	; 64
     8b2:	80 83       	st	Z, r24
  
  return 1;
}
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     8be:	08 95       	ret

000008c0 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
     8c0:	1f 92       	push	r1
     8c2:	0f 92       	push	r0
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	2f 93       	push	r18
     8cc:	3f 93       	push	r19
     8ce:	4f 93       	push	r20
     8d0:	8f 93       	push	r24
     8d2:	9f 93       	push	r25
     8d4:	ef 93       	push	r30
     8d6:	ff 93       	push	r31
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
     8d8:	80 91 c0 00 	lds	r24, 0x00C0
     8dc:	82 fd       	sbrc	r24, 2
     8de:	1c c0       	rjmp	.+56     	; 0x918 <__stack+0x19>
      unsigned char c = UDR0;
     8e0:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     8e4:	80 91 09 02 	lds	r24, 0x0209
     8e8:	90 91 0a 02 	lds	r25, 0x020A
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	8f 73       	andi	r24, 0x3F	; 63
     8f0:	99 27       	eor	r25, r25

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     8f2:	20 91 0b 02 	lds	r18, 0x020B
     8f6:	30 91 0c 02 	lds	r19, 0x020C
     8fa:	82 17       	cp	r24, r18
     8fc:	93 07       	cpc	r25, r19
     8fe:	71 f0       	breq	.+28     	; 0x91c <__stack+0x1d>
    buffer->buffer[buffer->head] = c;
     900:	e0 91 09 02 	lds	r30, 0x0209
     904:	f0 91 0a 02 	lds	r31, 0x020A
     908:	e7 53       	subi	r30, 0x37	; 55
     90a:	fe 4f       	sbci	r31, 0xFE	; 254
     90c:	40 83       	st	Z, r20
    buffer->head = i;
     90e:	90 93 0a 02 	sts	0x020A, r25
     912:	80 93 09 02 	sts	0x0209, r24
     916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0x1d>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
     918:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
     91c:	ff 91       	pop	r31
     91e:	ef 91       	pop	r30
     920:	9f 91       	pop	r25
     922:	8f 91       	pop	r24
     924:	4f 91       	pop	r20
     926:	3f 91       	pop	r19
     928:	2f 91       	pop	r18
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	0f 90       	pop	r0
     930:	1f 90       	pop	r1
     932:	18 95       	reti

00000934 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     934:	83 e6       	ldi	r24, 0x63	; 99
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 c4 03 	call	0x788	; 0x788 <_ZN14HardwareSerial9availableEv>
     93c:	89 2b       	or	r24, r25
     93e:	11 f0       	breq	.+4      	; 0x944 <_Z14serialEventRunv+0x10>
     940:	0c 94 5f 04 	jmp	0x8be	; 0x8be <_Z11serialEventv>
     944:	08 95       	ret

00000946 <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
     946:	1f 92       	push	r1
     948:	0f 92       	push	r0
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	2f 93       	push	r18
     952:	3f 93       	push	r19
     954:	8f 93       	push	r24
     956:	9f 93       	push	r25
     958:	ef 93       	push	r30
     95a:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
     95c:	20 91 c5 01 	lds	r18, 0x01C5
     960:	30 91 c6 01 	lds	r19, 0x01C6
     964:	80 91 c7 01 	lds	r24, 0x01C7
     968:	90 91 c8 01 	lds	r25, 0x01C8
     96c:	28 17       	cp	r18, r24
     96e:	39 07       	cpc	r19, r25
     970:	31 f4       	brne	.+12     	; 0x97e <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     972:	80 91 c1 00 	lds	r24, 0x00C1
     976:	8f 7d       	andi	r24, 0xDF	; 223
     978:	80 93 c1 00 	sts	0x00C1, r24
     97c:	14 c0       	rjmp	.+40     	; 0x9a6 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     97e:	e0 91 c7 01 	lds	r30, 0x01C7
     982:	f0 91 c8 01 	lds	r31, 0x01C8
     986:	eb 57       	subi	r30, 0x7B	; 123
     988:	fe 4f       	sbci	r31, 0xFE	; 254
     98a:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     98c:	80 91 c7 01 	lds	r24, 0x01C7
     990:	90 91 c8 01 	lds	r25, 0x01C8
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	8f 73       	andi	r24, 0x3F	; 63
     998:	99 27       	eor	r25, r25
     99a:	90 93 c8 01 	sts	0x01C8, r25
     99e:	80 93 c7 01 	sts	0x01C7, r24
	
  #if defined(UDR0)
    UDR0 = c;
     9a2:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     9a6:	ff 91       	pop	r31
     9a8:	ef 91       	pop	r30
     9aa:	9f 91       	pop	r25
     9ac:	8f 91       	pop	r24
     9ae:	3f 91       	pop	r19
     9b0:	2f 91       	pop	r18
     9b2:	0f 90       	pop	r0
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	0f 90       	pop	r0
     9b8:	1f 90       	pop	r1
     9ba:	18 95       	reti

000009bc <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	ec 01       	movw	r28, r24
     9ca:	6a 01       	movw	r12, r20
     9cc:	7b 01       	movw	r14, r22
  }
#endif

try_again:
  
  if (use_u2x) {
     9ce:	41 15       	cp	r20, r1
     9d0:	81 ee       	ldi	r24, 0xE1	; 225
     9d2:	58 07       	cpc	r21, r24
     9d4:	61 05       	cpc	r22, r1
     9d6:	71 05       	cpc	r23, r1
     9d8:	f9 f0       	breq	.+62     	; 0xa18 <_ZN14HardwareSerial5beginEm+0x5c>
    *_ucsra = 1 << _u2x;
     9da:	ec 89       	ldd	r30, Y+20	; 0x14
     9dc:	fd 89       	ldd	r31, Y+21	; 0x15
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	08 a0       	ldd	r0, Y+32	; 0x20
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <_ZN14HardwareSerial5beginEm+0x2e>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	0a 94       	dec	r0
     9ec:	e2 f7       	brpl	.-8      	; 0x9e6 <_ZN14HardwareSerial5beginEm+0x2a>
     9ee:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	79 e0       	ldi	r23, 0x09	; 9
     9f4:	8d e3       	ldi	r24, 0x3D	; 61
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	a7 01       	movw	r20, r14
     9fa:	96 01       	movw	r18, r12
     9fc:	0e 94 cc 08 	call	0x1198	; 0x1198 <__udivmodsi4>
     a00:	21 50       	subi	r18, 0x01	; 1
     a02:	31 09       	sbc	r19, r1
     a04:	41 09       	sbc	r20, r1
     a06:	51 09       	sbc	r21, r1
     a08:	56 95       	lsr	r21
     a0a:	47 95       	ror	r20
     a0c:	37 95       	ror	r19
     a0e:	27 95       	ror	r18
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
     a10:	21 15       	cp	r18, r1
     a12:	80 e1       	ldi	r24, 0x10	; 16
     a14:	38 07       	cpc	r19, r24
     a16:	98 f0       	brcs	.+38     	; 0xa3e <_ZN14HardwareSerial5beginEm+0x82>
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
     a18:	ec 89       	ldd	r30, Y+20	; 0x14
     a1a:	fd 89       	ldd	r31, Y+21	; 0x15
     a1c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     a1e:	60 e8       	ldi	r22, 0x80	; 128
     a20:	74 e8       	ldi	r23, 0x84	; 132
     a22:	8e e1       	ldi	r24, 0x1E	; 30
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	a7 01       	movw	r20, r14
     a28:	96 01       	movw	r18, r12
     a2a:	0e 94 cc 08 	call	0x1198	; 0x1198 <__udivmodsi4>
     a2e:	21 50       	subi	r18, 0x01	; 1
     a30:	31 09       	sbc	r19, r1
     a32:	41 09       	sbc	r20, r1
     a34:	51 09       	sbc	r21, r1
     a36:	56 95       	lsr	r21
     a38:	47 95       	ror	r20
     a3a:	37 95       	ror	r19
     a3c:	27 95       	ror	r18
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     a3e:	e8 89       	ldd	r30, Y+16	; 0x10
     a40:	f9 89       	ldd	r31, Y+17	; 0x11
     a42:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     a44:	ea 89       	ldd	r30, Y+18	; 0x12
     a46:	fb 89       	ldd	r31, Y+19	; 0x13
     a48:	20 83       	st	Z, r18

  transmitting = false;
     a4a:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
     a4c:	ee 89       	ldd	r30, Y+22	; 0x16
     a4e:	ff 89       	ldd	r31, Y+23	; 0x17
     a50:	40 81       	ld	r20, Z
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	9c 01       	movw	r18, r24
     a58:	0c 8c       	ldd	r0, Y+28	; 0x1c
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <_ZN14HardwareSerial5beginEm+0xa4>
     a5c:	22 0f       	add	r18, r18
     a5e:	33 1f       	adc	r19, r19
     a60:	0a 94       	dec	r0
     a62:	e2 f7       	brpl	.-8      	; 0xa5c <_ZN14HardwareSerial5beginEm+0xa0>
     a64:	42 2b       	or	r20, r18
     a66:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     a68:	ee 89       	ldd	r30, Y+22	; 0x16
     a6a:	ff 89       	ldd	r31, Y+23	; 0x17
     a6c:	40 81       	ld	r20, Z
     a6e:	9c 01       	movw	r18, r24
     a70:	0d 8c       	ldd	r0, Y+29	; 0x1d
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <_ZN14HardwareSerial5beginEm+0xbc>
     a74:	22 0f       	add	r18, r18
     a76:	33 1f       	adc	r19, r19
     a78:	0a 94       	dec	r0
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <_ZN14HardwareSerial5beginEm+0xb8>
     a7c:	42 2b       	or	r20, r18
     a7e:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     a80:	ee 89       	ldd	r30, Y+22	; 0x16
     a82:	ff 89       	ldd	r31, Y+23	; 0x17
     a84:	40 81       	ld	r20, Z
     a86:	9c 01       	movw	r18, r24
     a88:	0e 8c       	ldd	r0, Y+30	; 0x1e
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <_ZN14HardwareSerial5beginEm+0xd4>
     a8c:	22 0f       	add	r18, r18
     a8e:	33 1f       	adc	r19, r19
     a90:	0a 94       	dec	r0
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <_ZN14HardwareSerial5beginEm+0xd0>
     a94:	42 2b       	or	r20, r18
     a96:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     a98:	ee 89       	ldd	r30, Y+22	; 0x16
     a9a:	ff 89       	ldd	r31, Y+23	; 0x17
     a9c:	20 81       	ld	r18, Z
     a9e:	0f 8c       	ldd	r0, Y+31	; 0x1f
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <_ZN14HardwareSerial5beginEm+0xea>
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	0a 94       	dec	r0
     aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <_ZN14HardwareSerial5beginEm+0xe6>
     aaa:	80 95       	com	r24
     aac:	82 23       	and	r24, r18
     aae:	80 83       	st	Z, r24
}
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	df 90       	pop	r13
     aba:	cf 90       	pop	r12
     abc:	08 95       	ret

00000abe <_GLOBAL__sub_I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     abe:	10 92 66 01 	sts	0x0166, r1
     ac2:	10 92 65 01 	sts	0x0165, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     ac6:	88 ee       	ldi	r24, 0xE8	; 232
     ac8:	93 e0       	ldi	r25, 0x03	; 3
     aca:	a0 e0       	ldi	r26, 0x00	; 0
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	80 93 67 01 	sts	0x0167, r24
     ad2:	90 93 68 01 	sts	0x0168, r25
     ad6:	a0 93 69 01 	sts	0x0169, r26
     ada:	b0 93 6a 01 	sts	0x016A, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     ade:	88 e4       	ldi	r24, 0x48	; 72
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	90 93 64 01 	sts	0x0164, r25
     ae6:	80 93 63 01 	sts	0x0163, r24
{
  _rx_buffer = rx_buffer;
     aea:	89 ec       	ldi	r24, 0xC9	; 201
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	90 93 70 01 	sts	0x0170, r25
     af2:	80 93 6f 01 	sts	0x016F, r24
  _tx_buffer = tx_buffer;
     af6:	85 e8       	ldi	r24, 0x85	; 133
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	90 93 72 01 	sts	0x0172, r25
     afe:	80 93 71 01 	sts	0x0171, r24
  _ubrrh = ubrrh;
     b02:	85 ec       	ldi	r24, 0xC5	; 197
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	90 93 74 01 	sts	0x0174, r25
     b0a:	80 93 73 01 	sts	0x0173, r24
  _ubrrl = ubrrl;
     b0e:	84 ec       	ldi	r24, 0xC4	; 196
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	90 93 76 01 	sts	0x0176, r25
     b16:	80 93 75 01 	sts	0x0175, r24
  _ucsra = ucsra;
     b1a:	80 ec       	ldi	r24, 0xC0	; 192
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	90 93 78 01 	sts	0x0178, r25
     b22:	80 93 77 01 	sts	0x0177, r24
  _ucsrb = ucsrb;
     b26:	81 ec       	ldi	r24, 0xC1	; 193
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	90 93 7a 01 	sts	0x017A, r25
     b2e:	80 93 79 01 	sts	0x0179, r24
  _ucsrc = ucsrc;
     b32:	82 ec       	ldi	r24, 0xC2	; 194
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	90 93 7c 01 	sts	0x017C, r25
     b3a:	80 93 7b 01 	sts	0x017B, r24
  _udr = udr;
     b3e:	86 ec       	ldi	r24, 0xC6	; 198
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	90 93 7e 01 	sts	0x017E, r25
     b46:	80 93 7d 01 	sts	0x017D, r24
  _rxen = rxen;
     b4a:	84 e0       	ldi	r24, 0x04	; 4
     b4c:	80 93 7f 01 	sts	0x017F, r24
  _txen = txen;
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	80 93 80 01 	sts	0x0180, r24
  _rxcie = rxcie;
     b56:	87 e0       	ldi	r24, 0x07	; 7
     b58:	80 93 81 01 	sts	0x0181, r24
  _udrie = udrie;
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	80 93 82 01 	sts	0x0182, r24
  _u2x = u2x;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	80 93 83 01 	sts	0x0183, r24
     b68:	08 95       	ret

00000b6a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     b6a:	cf 92       	push	r12
     b6c:	df 92       	push	r13
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	6c 01       	movw	r12, r24
     b7c:	eb 01       	movw	r28, r22
     b7e:	7a 01       	movw	r14, r20
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
     b80:	e6 0e       	add	r14, r22
     b82:	f7 1e       	adc	r15, r23
{
  size_t n = 0;
     b84:	00 e0       	ldi	r16, 0x00	; 0
     b86:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
     b88:	0b c0       	rjmp	.+22     	; 0xba0 <_ZN5Print5writeEPKhj+0x36>
    n += write(*buffer++);
     b8a:	69 91       	ld	r22, Y+
     b8c:	d6 01       	movw	r26, r12
     b8e:	ed 91       	ld	r30, X+
     b90:	fc 91       	ld	r31, X
     b92:	01 90       	ld	r0, Z+
     b94:	f0 81       	ld	r31, Z
     b96:	e0 2d       	mov	r30, r0
     b98:	c6 01       	movw	r24, r12
     b9a:	09 95       	icall
     b9c:	08 0f       	add	r16, r24
     b9e:	19 1f       	adc	r17, r25

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     ba0:	ce 15       	cp	r28, r14
     ba2:	df 05       	cpc	r29, r15
     ba4:	91 f7       	brne	.-28     	; 0xb8a <_ZN5Print5writeEPKhj+0x20>
    n += write(*buffer++);
  }
  return n;
}
     ba6:	c8 01       	movw	r24, r16
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	df 90       	pop	r13
     bb6:	cf 90       	pop	r12
     bb8:	08 95       	ret

00000bba <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     bba:	61 15       	cp	r22, r1
     bbc:	71 05       	cpc	r23, r1
     bbe:	81 f0       	breq	.+32     	; 0xbe0 <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
     bc0:	db 01       	movw	r26, r22
     bc2:	0d 90       	ld	r0, X+
     bc4:	00 20       	and	r0, r0
     bc6:	e9 f7       	brne	.-6      	; 0xbc2 <_ZN5Print5writeEPKc+0x8>
     bc8:	ad 01       	movw	r20, r26
     bca:	41 50       	subi	r20, 0x01	; 1
     bcc:	51 09       	sbc	r21, r1
     bce:	46 1b       	sub	r20, r22
     bd0:	57 0b       	sbc	r21, r23
     bd2:	dc 01       	movw	r26, r24
     bd4:	ed 91       	ld	r30, X+
     bd6:	fc 91       	ld	r31, X
     bd8:	02 80       	ldd	r0, Z+2	; 0x02
     bda:	f3 81       	ldd	r31, Z+3	; 0x03
     bdc:	e0 2d       	mov	r30, r0
     bde:	09 94       	ijmp
    }
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	08 95       	ret

00000be6 <_ZN5Print5printEc>:
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
     be6:	dc 01       	movw	r26, r24
     be8:	ed 91       	ld	r30, X+
     bea:	fc 91       	ld	r31, X
     bec:	01 90       	ld	r0, Z+
     bee:	f0 81       	ld	r31, Z
     bf0:	e0 2d       	mov	r30, r0
     bf2:	09 94       	ijmp

00000bf4 <_ZN5Print7printlnEv>:
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	ec 01       	movw	r28, r24
     bfe:	6d e0       	ldi	r22, 0x0D	; 13
     c00:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_ZN5Print5printEc>
     c04:	8c 01       	movw	r16, r24
     c06:	6a e0       	ldi	r22, 0x0A	; 10
     c08:	ce 01       	movw	r24, r28
     c0a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_ZN5Print5printEc>
     c0e:	9c 01       	movw	r18, r24
     c10:	20 0f       	add	r18, r16
     c12:	31 1f       	adc	r19, r17
     c14:	c9 01       	movw	r24, r18
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	08 95       	ret

00000c20 <_ZN5Print7printlnEPKc>:
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	ec 01       	movw	r28, r24
    size_t print(int, int = DEC);
    size_t print(unsigned int, int = DEC);
    size_t print(long, int = DEC);
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);
     c2a:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN5Print5writeEPKc>
     c2e:	8c 01       	movw	r16, r24
     c30:	ce 01       	movw	r24, r28
     c32:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN5Print7printlnEv>
     c36:	98 01       	movw	r18, r16
     c38:	28 0f       	add	r18, r24
     c3a:	39 1f       	adc	r19, r25
     c3c:	c9 01       	movw	r24, r18
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	08 95       	ret

00000c48 <_ZN5Print11printNumberEmh>:
     c48:	4f 92       	push	r4
     c4a:	5f 92       	push	r5
     c4c:	6f 92       	push	r6
     c4e:	7f 92       	push	r7
     c50:	9f 92       	push	r9
     c52:	af 92       	push	r10
     c54:	bf 92       	push	r11
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	a1 97       	sbiw	r28, 0x21	; 33
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	5c 01       	movw	r10, r24
     c78:	6a 01       	movw	r12, r20
     c7a:	7b 01       	movw	r14, r22
     c7c:	92 2e       	mov	r9, r18
     c7e:	19 a2       	std	Y+33, r1	; 0x21
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	82 17       	cp	r24, r18
     c84:	10 f0       	brcs	.+4      	; 0xc8a <_ZN5Print11printNumberEmh+0x42>
     c86:	8a e0       	ldi	r24, 0x0A	; 10
     c88:	98 2e       	mov	r9, r24
     c8a:	8e 01       	movw	r16, r28
     c8c:	0f 5d       	subi	r16, 0xDF	; 223
     c8e:	1f 4f       	sbci	r17, 0xFF	; 255
     c90:	49 2c       	mov	r4, r9
     c92:	51 2c       	mov	r5, r1
     c94:	61 2c       	mov	r6, r1
     c96:	71 2c       	mov	r7, r1
     c98:	c7 01       	movw	r24, r14
     c9a:	b6 01       	movw	r22, r12
     c9c:	a3 01       	movw	r20, r6
     c9e:	92 01       	movw	r18, r4
     ca0:	0e 94 cc 08 	call	0x1198	; 0x1198 <__udivmodsi4>
     ca4:	8c 2d       	mov	r24, r12
     ca6:	92 9e       	mul	r9, r18
     ca8:	80 19       	sub	r24, r0
     caa:	11 24       	eor	r1, r1
     cac:	01 50       	subi	r16, 0x01	; 1
     cae:	11 09       	sbc	r17, r1
     cb0:	8a 30       	cpi	r24, 0x0A	; 10
     cb2:	14 f4       	brge	.+4      	; 0xcb8 <_ZN5Print11printNumberEmh+0x70>
     cb4:	80 5d       	subi	r24, 0xD0	; 208
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <_ZN5Print11printNumberEmh+0x72>
     cb8:	89 5c       	subi	r24, 0xC9	; 201
     cba:	f8 01       	movw	r30, r16
     cbc:	80 83       	st	Z, r24
     cbe:	69 01       	movw	r12, r18
     cc0:	7a 01       	movw	r14, r20
     cc2:	c1 14       	cp	r12, r1
     cc4:	d1 04       	cpc	r13, r1
     cc6:	e1 04       	cpc	r14, r1
     cc8:	f1 04       	cpc	r15, r1
     cca:	31 f7       	brne	.-52     	; 0xc98 <_ZN5Print11printNumberEmh+0x50>
     ccc:	b8 01       	movw	r22, r16
     cce:	c5 01       	movw	r24, r10
     cd0:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN5Print5writeEPKc>
     cd4:	a1 96       	adiw	r28, 0x21	; 33
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	1f 91       	pop	r17
     ce6:	0f 91       	pop	r16
     ce8:	ff 90       	pop	r15
     cea:	ef 90       	pop	r14
     cec:	df 90       	pop	r13
     cee:	cf 90       	pop	r12
     cf0:	bf 90       	pop	r11
     cf2:	af 90       	pop	r10
     cf4:	9f 90       	pop	r9
     cf6:	7f 90       	pop	r7
     cf8:	6f 90       	pop	r6
     cfa:	5f 90       	pop	r5
     cfc:	4f 90       	pop	r4
     cfe:	08 95       	ret

00000d00 <_ZN5Print5printEli>:
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	ec 01       	movw	r28, r24
     d12:	6a 01       	movw	r12, r20
     d14:	7b 01       	movw	r14, r22
     d16:	21 15       	cp	r18, r1
     d18:	31 05       	cpc	r19, r1
     d1a:	79 f4       	brne	.+30     	; 0xd3a <_ZN5Print5printEli+0x3a>
     d1c:	e8 81       	ld	r30, Y
     d1e:	f9 81       	ldd	r31, Y+1	; 0x01
     d20:	01 90       	ld	r0, Z+
     d22:	f0 81       	ld	r31, Z
     d24:	e0 2d       	mov	r30, r0
     d26:	64 2f       	mov	r22, r20
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	cf 90       	pop	r12
     d38:	09 94       	ijmp
     d3a:	2a 30       	cpi	r18, 0x0A	; 10
     d3c:	31 05       	cpc	r19, r1
     d3e:	19 f4       	brne	.+6      	; 0xd46 <_ZN5Print5printEli+0x46>
     d40:	77 fd       	sbrc	r23, 7
     d42:	0e c0       	rjmp	.+28     	; 0xd60 <_ZN5Print5printEli+0x60>
     d44:	2a e0       	ldi	r18, 0x0A	; 10
     d46:	b7 01       	movw	r22, r14
     d48:	a6 01       	movw	r20, r12
     d4a:	ce 01       	movw	r24, r28
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	1f 91       	pop	r17
     d52:	0f 91       	pop	r16
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	df 90       	pop	r13
     d5a:	cf 90       	pop	r12
     d5c:	0c 94 24 06 	jmp	0xc48	; 0xc48 <_ZN5Print11printNumberEmh>
     d60:	6d e2       	ldi	r22, 0x2D	; 45
     d62:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <_ZN5Print5printEc>
     d66:	8c 01       	movw	r16, r24
     d68:	44 27       	eor	r20, r20
     d6a:	55 27       	eor	r21, r21
     d6c:	ba 01       	movw	r22, r20
     d6e:	4c 19       	sub	r20, r12
     d70:	5d 09       	sbc	r21, r13
     d72:	6e 09       	sbc	r22, r14
     d74:	7f 09       	sbc	r23, r15
     d76:	2a e0       	ldi	r18, 0x0A	; 10
     d78:	ce 01       	movw	r24, r28
     d7a:	0e 94 24 06 	call	0xc48	; 0xc48 <_ZN5Print11printNumberEmh>
     d7e:	08 0f       	add	r16, r24
     d80:	19 1f       	adc	r17, r25
     d82:	c8 01       	movw	r24, r16
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	df 90       	pop	r13
     d92:	cf 90       	pop	r12
     d94:	08 95       	ret

00000d96 <_ZN5Print5printEii>:
    size_t println(long, int = DEC);
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
};
     d96:	9a 01       	movw	r18, r20

     d98:	ab 01       	movw	r20, r22
     d9a:	66 27       	eor	r22, r22
     d9c:	57 fd       	sbrc	r21, 7
     d9e:	60 95       	com	r22
     da0:	76 2f       	mov	r23, r22
     da2:	0c 94 80 06 	jmp	0xd00	; 0xd00 <_ZN5Print5printEli>

00000da6 <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
     da6:	00 97       	sbiw	r24, 0x00	; 0
     da8:	29 f0       	breq	.+10     	; 0xdb4 <_Z10randomSeedj+0xe>
    srandom(seed);
     daa:	bc 01       	movw	r22, r24
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <srandom>
     db4:	08 95       	ret

00000db6 <_Z6randoml>:
  }
}

long random(long howbig)
{
     db6:	0f 93       	push	r16
     db8:	1f 93       	push	r17
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <_Z6randoml+0xa>
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <_Z6randoml+0xc>
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	9b 01       	movw	r18, r22
     dc8:	ac 01       	movw	r20, r24
  if (howbig == 0) {
     dca:	61 15       	cp	r22, r1
     dcc:	71 05       	cpc	r23, r1
     dce:	81 05       	cpc	r24, r1
     dd0:	91 05       	cpc	r25, r1
     dd2:	79 f0       	breq	.+30     	; 0xdf2 <_Z6randoml+0x3c>
    return 0;
  }
  return random() % howbig;
     dd4:	69 83       	std	Y+1, r22	; 0x01
     dd6:	3a 83       	std	Y+2, r19	; 0x02
     dd8:	4b 83       	std	Y+3, r20	; 0x03
     dda:	5c 83       	std	Y+4, r21	; 0x04
     ddc:	0e 94 77 09 	call	0x12ee	; 0x12ee <random>
     de0:	29 81       	ldd	r18, Y+1	; 0x01
     de2:	3a 81       	ldd	r19, Y+2	; 0x02
     de4:	4b 81       	ldd	r20, Y+3	; 0x03
     de6:	5c 81       	ldd	r21, Y+4	; 0x04
     de8:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__divmodsi4>
     dec:	8b 01       	movw	r16, r22
     dee:	9c 01       	movw	r18, r24
     df0:	03 c0       	rjmp	.+6      	; 0xdf8 <_Z6randoml+0x42>
}

long random(long howbig)
{
  if (howbig == 0) {
    return 0;
     df2:	00 e0       	ldi	r16, 0x00	; 0
     df4:	10 e0       	ldi	r17, 0x00	; 0
     df6:	98 01       	movw	r18, r16
  }
  return random() % howbig;
}
     df8:	b8 01       	movw	r22, r16
     dfa:	c9 01       	movw	r24, r18
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret

00000e0e <main>:
#include <Arduino.h>

int main(void)
{
	init();
     e0e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     e12:	0e 94 ef 01 	call	0x3de	; 0x3de <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     e16:	ca e9       	ldi	r28, 0x9A	; 154
     e18:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     e1a:	0e 94 8e 03 	call	0x71c	; 0x71c <loop>
		if (serialEventRun) serialEventRun();
     e1e:	20 97       	sbiw	r28, 0x00	; 0
     e20:	e1 f3       	breq	.-8      	; 0xe1a <main+0xc>
     e22:	0e 94 9a 04 	call	0x934	; 0x934 <_Z14serialEventRunv>
     e26:	f9 cf       	rjmp	.-14     	; 0xe1a <main+0xc>

00000e28 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	8f 93       	push	r24
     e38:	9f 93       	push	r25
     e3a:	af 93       	push	r26
     e3c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     e3e:	80 91 0d 02 	lds	r24, 0x020D
     e42:	90 91 0e 02 	lds	r25, 0x020E
     e46:	a0 91 0f 02 	lds	r26, 0x020F
     e4a:	b0 91 10 02 	lds	r27, 0x0210
	unsigned char f = timer0_fract;
     e4e:	30 91 15 02 	lds	r19, 0x0215

	m += MILLIS_INC;
	f += FRACT_INC;
     e52:	23 2f       	mov	r18, r19
     e54:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     e56:	2d 37       	cpi	r18, 0x7D	; 125
     e58:	20 f4       	brcc	.+8      	; 0xe62 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	a1 1d       	adc	r26, r1
     e5e:	b1 1d       	adc	r27, r1
     e60:	05 c0       	rjmp	.+10     	; 0xe6c <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
     e62:	23 2f       	mov	r18, r19
     e64:	2a 57       	subi	r18, 0x7A	; 122
		m += 1;
     e66:	02 96       	adiw	r24, 0x02	; 2
     e68:	a1 1d       	adc	r26, r1
     e6a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     e6c:	20 93 15 02 	sts	0x0215, r18
	timer0_millis = m;
     e70:	80 93 0d 02 	sts	0x020D, r24
     e74:	90 93 0e 02 	sts	0x020E, r25
     e78:	a0 93 0f 02 	sts	0x020F, r26
     e7c:	b0 93 10 02 	sts	0x0210, r27
	timer0_overflow_count++;
     e80:	80 91 11 02 	lds	r24, 0x0211
     e84:	90 91 12 02 	lds	r25, 0x0212
     e88:	a0 91 13 02 	lds	r26, 0x0213
     e8c:	b0 91 14 02 	lds	r27, 0x0214
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	a1 1d       	adc	r26, r1
     e94:	b1 1d       	adc	r27, r1
     e96:	80 93 11 02 	sts	0x0211, r24
     e9a:	90 93 12 02 	sts	0x0212, r25
     e9e:	a0 93 13 02 	sts	0x0213, r26
     ea2:	b0 93 14 02 	sts	0x0214, r27
}
     ea6:	bf 91       	pop	r27
     ea8:	af 91       	pop	r26
     eaa:	9f 91       	pop	r25
     eac:	8f 91       	pop	r24
     eae:	3f 91       	pop	r19
     eb0:	2f 91       	pop	r18
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	0f 90       	pop	r0
     eb8:	1f 90       	pop	r1
     eba:	18 95       	reti

00000ebc <micros>:
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     ec0:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
     ec2:	f8 94       	cli
	m = timer0_overflow_count;
     ec4:	00 91 11 02 	lds	r16, 0x0211
     ec8:	10 91 12 02 	lds	r17, 0x0212
     ecc:	20 91 13 02 	lds	r18, 0x0213
     ed0:	30 91 14 02 	lds	r19, 0x0214
#if defined(TCNT0)
	t = TCNT0;
     ed4:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     ed6:	a8 9b       	sbis	0x15, 0	; 21
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <micros+0x2a>
     eda:	8f 3f       	cpi	r24, 0xFF	; 255
     edc:	21 f0       	breq	.+8      	; 0xee6 <micros+0x2a>
		m++;
     ede:	0f 5f       	subi	r16, 0xFF	; 255
     ee0:	1f 4f       	sbci	r17, 0xFF	; 255
     ee2:	2f 4f       	sbci	r18, 0xFF	; 255
     ee4:	3f 4f       	sbci	r19, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     ee6:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     ee8:	32 2f       	mov	r19, r18
     eea:	21 2f       	mov	r18, r17
     eec:	10 2f       	mov	r17, r16
     eee:	00 27       	eor	r16, r16
     ef0:	08 0f       	add	r16, r24
     ef2:	11 1d       	adc	r17, r1
     ef4:	21 1d       	adc	r18, r1
     ef6:	31 1d       	adc	r19, r1
     ef8:	42 e0       	ldi	r20, 0x02	; 2
     efa:	00 0f       	add	r16, r16
     efc:	11 1f       	adc	r17, r17
     efe:	22 1f       	adc	r18, r18
     f00:	33 1f       	adc	r19, r19
     f02:	4a 95       	dec	r20
     f04:	d1 f7       	brne	.-12     	; 0xefa <micros+0x3e>
}
     f06:	b8 01       	movw	r22, r16
     f08:	c9 01       	movw	r24, r18
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	08 95       	ret

00000f10 <delay>:

void delay(unsigned long ms)
{
     f10:	cf 92       	push	r12
     f12:	df 92       	push	r13
     f14:	ef 92       	push	r14
     f16:	ff 92       	push	r15
     f18:	cf 93       	push	r28
     f1a:	df 93       	push	r29
     f1c:	6b 01       	movw	r12, r22
     f1e:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
     f20:	0e 94 5e 07 	call	0xebc	; 0xebc <micros>
     f24:	eb 01       	movw	r28, r22

	while (ms > 0) {
     f26:	0e c0       	rjmp	.+28     	; 0xf44 <delay+0x34>
		if (((uint16_t)micros() - start) >= 1000) {
     f28:	0e 94 5e 07 	call	0xebc	; 0xebc <micros>
     f2c:	6c 1b       	sub	r22, r28
     f2e:	7d 0b       	sbc	r23, r29
     f30:	68 3e       	cpi	r22, 0xE8	; 232
     f32:	73 40       	sbci	r23, 0x03	; 3
     f34:	38 f0       	brcs	.+14     	; 0xf44 <delay+0x34>
			ms--;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	c8 1a       	sub	r12, r24
     f3a:	d1 08       	sbc	r13, r1
     f3c:	e1 08       	sbc	r14, r1
     f3e:	f1 08       	sbc	r15, r1
			start += 1000;
     f40:	c8 51       	subi	r28, 0x18	; 24
     f42:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     f44:	c1 14       	cp	r12, r1
     f46:	d1 04       	cpc	r13, r1
     f48:	e1 04       	cpc	r14, r1
     f4a:	f1 04       	cpc	r15, r1
     f4c:	69 f7       	brne	.-38     	; 0xf28 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	df 90       	pop	r13
     f58:	cf 90       	pop	r12
     f5a:	08 95       	ret

00000f5c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     f5c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     f5e:	84 b5       	in	r24, 0x24	; 36
     f60:	82 60       	ori	r24, 0x02	; 2
     f62:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     f64:	84 b5       	in	r24, 0x24	; 36
     f66:	81 60       	ori	r24, 0x01	; 1
     f68:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     f6a:	85 b5       	in	r24, 0x25	; 37
     f6c:	82 60       	ori	r24, 0x02	; 2
     f6e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     f70:	85 b5       	in	r24, 0x25	; 37
     f72:	81 60       	ori	r24, 0x01	; 1
     f74:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     f76:	ee e6       	ldi	r30, 0x6E	; 110
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	81 60       	ori	r24, 0x01	; 1
     f7e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     f80:	e1 e8       	ldi	r30, 0x81	; 129
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     f86:	80 81       	ld	r24, Z
     f88:	82 60       	ori	r24, 0x02	; 2
     f8a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     f8c:	80 81       	ld	r24, Z
     f8e:	81 60       	ori	r24, 0x01	; 1
     f90:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     f92:	e0 e8       	ldi	r30, 0x80	; 128
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	81 60       	ori	r24, 0x01	; 1
     f9a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     f9c:	e1 eb       	ldi	r30, 0xB1	; 177
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	84 60       	ori	r24, 0x04	; 4
     fa4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     fa6:	e0 eb       	ldi	r30, 0xB0	; 176
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	81 60       	ori	r24, 0x01	; 1
     fae:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     fb0:	ea e7       	ldi	r30, 0x7A	; 122
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	84 60       	ori	r24, 0x04	; 4
     fb8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     fba:	80 81       	ld	r24, Z
     fbc:	82 60       	ori	r24, 0x02	; 2
     fbe:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     fc0:	80 81       	ld	r24, Z
     fc2:	81 60       	ori	r24, 0x01	; 1
     fc4:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     fc6:	80 81       	ld	r24, Z
     fc8:	80 68       	ori	r24, 0x80	; 128
     fca:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     fcc:	10 92 c1 00 	sts	0x00C1, r1
     fd0:	08 95       	ret

00000fd2 <analogRead>:
#elif defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644P__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#elif defined(analogPinToChannel) && (defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__))
	pin = analogPinToChannel(pin);
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     fd2:	8e 30       	cpi	r24, 0x0E	; 14
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <analogRead+0x6>
     fd6:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     fd8:	87 70       	andi	r24, 0x07	; 7
     fda:	20 91 04 01 	lds	r18, 0x0104
     fde:	40 e4       	ldi	r20, 0x40	; 64
     fe0:	24 9f       	mul	r18, r20
     fe2:	90 01       	movw	r18, r0
     fe4:	11 24       	eor	r1, r1
     fe6:	82 2b       	or	r24, r18
     fe8:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     fec:	80 91 7a 00 	lds	r24, 0x007A
     ff0:	80 64       	ori	r24, 0x40	; 64
     ff2:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     ff6:	80 91 7a 00 	lds	r24, 0x007A
     ffa:	86 fd       	sbrc	r24, 6
     ffc:	fc cf       	rjmp	.-8      	; 0xff6 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     ffe:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    1002:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    1006:	93 2f       	mov	r25, r19
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	ac 01       	movw	r20, r24
    100c:	42 2b       	or	r20, r18
    100e:	9a 01       	movw	r18, r20
}
    1010:	c9 01       	movw	r24, r18
    1012:	08 95       	ret

00001014 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1014:	83 30       	cpi	r24, 0x03	; 3
    1016:	69 f0       	breq	.+26     	; 0x1032 <turnOffPWM+0x1e>
    1018:	28 f4       	brcc	.+10     	; 0x1024 <turnOffPWM+0x10>
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	a1 f0       	breq	.+40     	; 0x1046 <turnOffPWM+0x32>
    101e:	82 30       	cpi	r24, 0x02	; 2
    1020:	11 f5       	brne	.+68     	; 0x1066 <turnOffPWM+0x52>
    1022:	14 c0       	rjmp	.+40     	; 0x104c <turnOffPWM+0x38>
    1024:	86 30       	cpi	r24, 0x06	; 6
    1026:	b1 f0       	breq	.+44     	; 0x1054 <turnOffPWM+0x40>
    1028:	87 30       	cpi	r24, 0x07	; 7
    102a:	c1 f0       	breq	.+48     	; 0x105c <turnOffPWM+0x48>
    102c:	84 30       	cpi	r24, 0x04	; 4
    102e:	d9 f4       	brne	.+54     	; 0x1066 <turnOffPWM+0x52>
    1030:	04 c0       	rjmp	.+8      	; 0x103a <turnOffPWM+0x26>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1032:	80 91 80 00 	lds	r24, 0x0080
    1036:	8f 77       	andi	r24, 0x7F	; 127
    1038:	03 c0       	rjmp	.+6      	; 0x1040 <turnOffPWM+0x2c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    103a:	80 91 80 00 	lds	r24, 0x0080
    103e:	8f 7d       	andi	r24, 0xDF	; 223
    1040:	80 93 80 00 	sts	0x0080, r24
    1044:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1046:	84 b5       	in	r24, 0x24	; 36
    1048:	8f 77       	andi	r24, 0x7F	; 127
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <turnOffPWM+0x3c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    104c:	84 b5       	in	r24, 0x24	; 36
    104e:	8f 7d       	andi	r24, 0xDF	; 223
    1050:	84 bd       	out	0x24, r24	; 36
    1052:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1054:	80 91 b0 00 	lds	r24, 0x00B0
    1058:	8f 77       	andi	r24, 0x7F	; 127
    105a:	03 c0       	rjmp	.+6      	; 0x1062 <turnOffPWM+0x4e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    105c:	80 91 b0 00 	lds	r24, 0x00B0
    1060:	8f 7d       	andi	r24, 0xDF	; 223
    1062:	80 93 b0 00 	sts	0x00B0, r24
    1066:	08 95       	ret

00001068 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	fc 01       	movw	r30, r24
    1070:	e4 58       	subi	r30, 0x84	; 132
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
    1076:	fc 01       	movw	r30, r24
    1078:	e0 57       	subi	r30, 0x70	; 112
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    107e:	88 23       	and	r24, r24
    1080:	41 f1       	breq	.+80     	; 0x10d2 <pinMode+0x6a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	fc 01       	movw	r30, r24
    108a:	e8 54       	subi	r30, 0x48	; 72
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	25 91       	lpm	r18, Z+
    1090:	34 91       	lpm	r19, Z+
    1092:	d9 01       	movw	r26, r18
	out = portOutputRegister(port);
    1094:	82 55       	subi	r24, 0x52	; 82
    1096:	9f 4f       	sbci	r25, 0xFF	; 255
    1098:	fc 01       	movw	r30, r24
    109a:	85 91       	lpm	r24, Z+
    109c:	94 91       	lpm	r25, Z+
    109e:	c8 2f       	mov	r28, r24
    10a0:	d9 2f       	mov	r29, r25

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    10a2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    10a4:	f8 94       	cli
		*reg &= ~bit;
    10a6:	8c 91       	ld	r24, X

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
    10a8:	61 11       	cpse	r22, r1
    10aa:	06 c0       	rjmp	.+12     	; 0x10b8 <pinMode+0x50>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    10ac:	40 95       	com	r20
    10ae:	84 23       	and	r24, r20
    10b0:	8c 93       	st	X, r24
		*out &= ~bit;
    10b2:	88 81       	ld	r24, Y
    10b4:	84 23       	and	r24, r20
    10b6:	08 c0       	rjmp	.+16     	; 0x10c8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    10b8:	62 30       	cpi	r22, 0x02	; 2
    10ba:	41 f4       	brne	.+16     	; 0x10cc <pinMode+0x64>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    10bc:	24 2f       	mov	r18, r20
    10be:	20 95       	com	r18
    10c0:	82 23       	and	r24, r18
    10c2:	8c 93       	st	X, r24
		*out |= bit;
    10c4:	88 81       	ld	r24, Y
    10c6:	84 2b       	or	r24, r20
    10c8:	88 83       	st	Y, r24
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <pinMode+0x68>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
    10cc:	84 2b       	or	r24, r20
    10ce:	8c 93       	st	X, r24
		SREG = oldSREG;
    10d0:	9f bf       	out	0x3f, r25	; 63
	}
}
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    10d8:	0f 93       	push	r16
    10da:	1f 93       	push	r17
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	1f 92       	push	r1
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	f9 01       	movw	r30, r18
    10ec:	e8 59       	subi	r30, 0x98	; 152
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    10f2:	f9 01       	movw	r30, r18
    10f4:	e4 58       	subi	r30, 0x84	; 132
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    10fa:	f9 01       	movw	r30, r18
    10fc:	e0 57       	subi	r30, 0x70	; 112
    10fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1100:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1102:	00 23       	and	r16, r16
    1104:	d1 f0       	breq	.+52     	; 0x113a <digitalWrite+0x62>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1106:	88 23       	and	r24, r24
    1108:	21 f0       	breq	.+8      	; 0x1112 <digitalWrite+0x3a>
    110a:	69 83       	std	Y+1, r22	; 0x01
    110c:	0e 94 0a 08 	call	0x1014	; 0x1014 <turnOffPWM>
    1110:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    1112:	e0 2f       	mov	r30, r16
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	ee 0f       	add	r30, r30
    1118:	ff 1f       	adc	r31, r31
    111a:	e2 55       	subi	r30, 0x52	; 82
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	85 91       	lpm	r24, Z+
    1120:	94 91       	lpm	r25, Z+
    1122:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    1124:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1126:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    1128:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    112a:	61 11       	cpse	r22, r1
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <digitalWrite+0x5c>
		*out &= ~bit;
    112e:	10 95       	com	r17
    1130:	81 23       	and	r24, r17
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <digitalWrite+0x5e>
	} else {
		*out |= bit;
    1134:	81 2b       	or	r24, r17
    1136:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1138:	9f bf       	out	0x3f, r25	; 63
}
    113a:	0f 90       	pop	r0
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	08 95       	ret

00001146 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	f9 01       	movw	r30, r18
    1150:	e8 59       	subi	r30, 0x98	; 152
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1156:	f9 01       	movw	r30, r18
    1158:	e4 58       	subi	r30, 0x84	; 132
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	d4 91       	lpm	r29, Z+
	uint8_t port = digitalPinToPort(pin);
    115e:	f9 01       	movw	r30, r18
    1160:	e0 57       	subi	r30, 0x70	; 112
    1162:	ff 4f       	sbci	r31, 0xFF	; 255
    1164:	c4 91       	lpm	r28, Z+

	if (port == NOT_A_PIN) return LOW;
    1166:	cc 23       	and	r28, r28
    1168:	89 f0       	breq	.+34     	; 0x118c <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    116a:	81 11       	cpse	r24, r1
    116c:	0e 94 0a 08 	call	0x1014	; 0x1014 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1170:	ec 2f       	mov	r30, r28
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	ee 0f       	add	r30, r30
    1176:	ff 1f       	adc	r31, r31
    1178:	ec 55       	subi	r30, 0x5C	; 92
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	85 91       	lpm	r24, Z+
    117e:	94 91       	lpm	r25, Z+
    1180:	dc 01       	movw	r26, r24
    1182:	8c 91       	ld	r24, X
    1184:	8d 23       	and	r24, r29
    1186:	21 e0       	ldi	r18, 0x01	; 1
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	11 f4       	brne	.+4      	; 0x1190 <digitalRead+0x4a>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1190:	c9 01       	movw	r24, r18
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <__udivmodsi4>:
    1198:	a1 e2       	ldi	r26, 0x21	; 33
    119a:	1a 2e       	mov	r1, r26
    119c:	aa 1b       	sub	r26, r26
    119e:	bb 1b       	sub	r27, r27
    11a0:	fd 01       	movw	r30, r26
    11a2:	0d c0       	rjmp	.+26     	; 0x11be <__udivmodsi4_ep>

000011a4 <__udivmodsi4_loop>:
    11a4:	aa 1f       	adc	r26, r26
    11a6:	bb 1f       	adc	r27, r27
    11a8:	ee 1f       	adc	r30, r30
    11aa:	ff 1f       	adc	r31, r31
    11ac:	a2 17       	cp	r26, r18
    11ae:	b3 07       	cpc	r27, r19
    11b0:	e4 07       	cpc	r30, r20
    11b2:	f5 07       	cpc	r31, r21
    11b4:	20 f0       	brcs	.+8      	; 0x11be <__udivmodsi4_ep>
    11b6:	a2 1b       	sub	r26, r18
    11b8:	b3 0b       	sbc	r27, r19
    11ba:	e4 0b       	sbc	r30, r20
    11bc:	f5 0b       	sbc	r31, r21

000011be <__udivmodsi4_ep>:
    11be:	66 1f       	adc	r22, r22
    11c0:	77 1f       	adc	r23, r23
    11c2:	88 1f       	adc	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	1a 94       	dec	r1
    11c8:	69 f7       	brne	.-38     	; 0x11a4 <__udivmodsi4_loop>
    11ca:	60 95       	com	r22
    11cc:	70 95       	com	r23
    11ce:	80 95       	com	r24
    11d0:	90 95       	com	r25
    11d2:	9b 01       	movw	r18, r22
    11d4:	ac 01       	movw	r20, r24
    11d6:	bd 01       	movw	r22, r26
    11d8:	cf 01       	movw	r24, r30
    11da:	08 95       	ret

000011dc <__divmodsi4>:
    11dc:	05 2e       	mov	r0, r21
    11de:	97 fb       	bst	r25, 7
    11e0:	16 f4       	brtc	.+4      	; 0x11e6 <__divmodsi4+0xa>
    11e2:	00 94       	com	r0
    11e4:	07 d0       	rcall	.+14     	; 0x11f4 <__divmodsi4_neg1>
    11e6:	57 fd       	sbrc	r21, 7
    11e8:	0d d0       	rcall	.+26     	; 0x1204 <__divmodsi4_neg2>
    11ea:	0e 94 cc 08 	call	0x1198	; 0x1198 <__udivmodsi4>
    11ee:	07 fc       	sbrc	r0, 7
    11f0:	09 d0       	rcall	.+18     	; 0x1204 <__divmodsi4_neg2>
    11f2:	7e f4       	brtc	.+30     	; 0x1212 <__divmodsi4_exit>

000011f4 <__divmodsi4_neg1>:
    11f4:	90 95       	com	r25
    11f6:	80 95       	com	r24
    11f8:	70 95       	com	r23
    11fa:	61 95       	neg	r22
    11fc:	7f 4f       	sbci	r23, 0xFF	; 255
    11fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1200:	9f 4f       	sbci	r25, 0xFF	; 255
    1202:	08 95       	ret

00001204 <__divmodsi4_neg2>:
    1204:	50 95       	com	r21
    1206:	40 95       	com	r20
    1208:	30 95       	com	r19
    120a:	21 95       	neg	r18
    120c:	3f 4f       	sbci	r19, 0xFF	; 255
    120e:	4f 4f       	sbci	r20, 0xFF	; 255
    1210:	5f 4f       	sbci	r21, 0xFF	; 255

00001212 <__divmodsi4_exit>:
    1212:	08 95       	ret

00001214 <__muluhisi3>:
    1214:	0e 94 1b 09 	call	0x1236	; 0x1236 <__umulhisi3>
    1218:	a5 9f       	mul	r26, r21
    121a:	90 0d       	add	r25, r0
    121c:	b4 9f       	mul	r27, r20
    121e:	90 0d       	add	r25, r0
    1220:	a4 9f       	mul	r26, r20
    1222:	80 0d       	add	r24, r0
    1224:	91 1d       	adc	r25, r1
    1226:	11 24       	eor	r1, r1
    1228:	08 95       	ret

0000122a <__tablejump2__>:
    122a:	ee 0f       	add	r30, r30
    122c:	ff 1f       	adc	r31, r31

0000122e <__tablejump__>:
    122e:	05 90       	lpm	r0, Z+
    1230:	f4 91       	lpm	r31, Z+
    1232:	e0 2d       	mov	r30, r0
    1234:	09 94       	ijmp

00001236 <__umulhisi3>:
    1236:	a2 9f       	mul	r26, r18
    1238:	b0 01       	movw	r22, r0
    123a:	b3 9f       	mul	r27, r19
    123c:	c0 01       	movw	r24, r0
    123e:	a3 9f       	mul	r26, r19
    1240:	01 d0       	rcall	.+2      	; 0x1244 <__umulhisi3+0xe>
    1242:	b2 9f       	mul	r27, r18
    1244:	70 0d       	add	r23, r0
    1246:	81 1d       	adc	r24, r1
    1248:	11 24       	eor	r1, r1
    124a:	91 1d       	adc	r25, r1
    124c:	08 95       	ret

0000124e <do_random>:
    124e:	8f 92       	push	r8
    1250:	9f 92       	push	r9
    1252:	af 92       	push	r10
    1254:	bf 92       	push	r11
    1256:	cf 92       	push	r12
    1258:	df 92       	push	r13
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	ec 01       	movw	r28, r24
    1264:	68 81       	ld	r22, Y
    1266:	79 81       	ldd	r23, Y+1	; 0x01
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	9b 81       	ldd	r25, Y+3	; 0x03
    126c:	61 15       	cp	r22, r1
    126e:	71 05       	cpc	r23, r1
    1270:	81 05       	cpc	r24, r1
    1272:	91 05       	cpc	r25, r1
    1274:	21 f4       	brne	.+8      	; 0x127e <do_random+0x30>
    1276:	64 e2       	ldi	r22, 0x24	; 36
    1278:	79 ed       	ldi	r23, 0xD9	; 217
    127a:	8b e5       	ldi	r24, 0x5B	; 91
    127c:	97 e0       	ldi	r25, 0x07	; 7
    127e:	2d e1       	ldi	r18, 0x1D	; 29
    1280:	33 ef       	ldi	r19, 0xF3	; 243
    1282:	41 e0       	ldi	r20, 0x01	; 1
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__divmodsi4>
    128a:	49 01       	movw	r8, r18
    128c:	5a 01       	movw	r10, r20
    128e:	9b 01       	movw	r18, r22
    1290:	ac 01       	movw	r20, r24
    1292:	a7 ea       	ldi	r26, 0xA7	; 167
    1294:	b1 e4       	ldi	r27, 0x41	; 65
    1296:	0e 94 0a 09 	call	0x1214	; 0x1214 <__muluhisi3>
    129a:	6b 01       	movw	r12, r22
    129c:	7c 01       	movw	r14, r24
    129e:	ac ee       	ldi	r26, 0xEC	; 236
    12a0:	b4 ef       	ldi	r27, 0xF4	; 244
    12a2:	a5 01       	movw	r20, r10
    12a4:	94 01       	movw	r18, r8
    12a6:	0e 94 88 09 	call	0x1310	; 0x1310 <__mulohisi3>
    12aa:	c6 0e       	add	r12, r22
    12ac:	d7 1e       	adc	r13, r23
    12ae:	e8 1e       	adc	r14, r24
    12b0:	f9 1e       	adc	r15, r25
    12b2:	f7 fe       	sbrs	r15, 7
    12b4:	06 c0       	rjmp	.+12     	; 0x12c2 <do_random+0x74>
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	c8 1a       	sub	r12, r24
    12ba:	d1 08       	sbc	r13, r1
    12bc:	e1 08       	sbc	r14, r1
    12be:	80 e8       	ldi	r24, 0x80	; 128
    12c0:	f8 0a       	sbc	r15, r24
    12c2:	c8 82       	st	Y, r12
    12c4:	d9 82       	std	Y+1, r13	; 0x01
    12c6:	ea 82       	std	Y+2, r14	; 0x02
    12c8:	fb 82       	std	Y+3, r15	; 0x03
    12ca:	e8 94       	clt
    12cc:	f7 f8       	bld	r15, 7
    12ce:	b6 01       	movw	r22, r12
    12d0:	c7 01       	movw	r24, r14
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	ff 90       	pop	r15
    12d8:	ef 90       	pop	r14
    12da:	df 90       	pop	r13
    12dc:	cf 90       	pop	r12
    12de:	bf 90       	pop	r11
    12e0:	af 90       	pop	r10
    12e2:	9f 90       	pop	r9
    12e4:	8f 90       	pop	r8
    12e6:	08 95       	ret

000012e8 <random_r>:
    12e8:	0e 94 27 09 	call	0x124e	; 0x124e <do_random>
    12ec:	08 95       	ret

000012ee <random>:
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	0e 94 27 09 	call	0x124e	; 0x124e <do_random>
    12f6:	08 95       	ret

000012f8 <srandom>:
    12f8:	60 93 00 01 	sts	0x0100, r22
    12fc:	70 93 01 01 	sts	0x0101, r23
    1300:	80 93 02 01 	sts	0x0102, r24
    1304:	90 93 03 01 	sts	0x0103, r25
    1308:	08 95       	ret

0000130a <__mulshisi3>:
    130a:	b7 ff       	sbrs	r27, 7
    130c:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__muluhisi3>

00001310 <__mulohisi3>:
    1310:	0e 94 0a 09 	call	0x1214	; 0x1214 <__muluhisi3>
    1314:	82 1b       	sub	r24, r18
    1316:	93 0b       	sbc	r25, r19
    1318:	08 95       	ret

0000131a <_exit>:
    131a:	f8 94       	cli

0000131c <__stop_program>:
    131c:	ff cf       	rjmp	.-2      	; 0x131c <__stop_program>
