
AnalogPorts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000a5a  00000aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b5  0080011c  0080011c  00000b0a  2**0
                  ALLOC
  3 .stab         00007284  00000000  00000000  00000b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000ae88  00000000  00000000  00007d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00012c18  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  40:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__vector_16>
  44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  48:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_18>
  4c:	0c 94 86 01 	jmp	0x30c	; 0x30c <__vector_19>
  50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000068 <digital_pin_to_bit_mask_PGM>:
  68:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  78:	04 08 10 20                                         ... 

0000007c <digital_pin_to_port_PGM>:
  7c:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  8c:	03 03 03 03                                         ....

00000090 <port_to_output_PGM>:
  90:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000009a <port_to_mode_PGM>:
  9a:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000a4 <__ctors_start>:
  a4:	42 02       	muls	r20, r18

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf ef       	ldi	r28, 0xFF	; 255
  ac:	d8 e0       	ldi	r29, 0x08	; 8
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	ea e5       	ldi	r30, 0x5A	; 90
  ba:	fa e0       	ldi	r31, 0x0A	; 10
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
  be:	05 90       	lpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	ac 31       	cpi	r26, 0x1C	; 28
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_clear_bss>:
  c8:	11 e0       	ldi	r17, 0x01	; 1
  ca:	ac e1       	ldi	r26, 0x1C	; 28
  cc:	b1 e0       	ldi	r27, 0x01	; 1
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a1 3d       	cpi	r26, 0xD1	; 209
  d4:	b1 07       	cpc	r27, r17
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>

000000d8 <__do_global_ctors>:
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	c6 ea       	ldi	r28, 0xA6	; 166
  dc:	d0 e0       	ldi	r29, 0x00	; 0
  de:	04 c0       	rjmp	.+8      	; 0xe8 <__do_global_ctors+0x10>
  e0:	22 97       	sbiw	r28, 0x02	; 2
  e2:	fe 01       	movw	r30, r28
  e4:	0e 94 27 05 	call	0xa4e	; 0xa4e <__tablejump__>
  e8:	c4 3a       	cpi	r28, 0xA4	; 164
  ea:	d1 07       	cpc	r29, r17
  ec:	c9 f7       	brne	.-14     	; 0xe0 <__do_global_ctors+0x8>
  ee:	0e 94 c8 03 	call	0x790	; 0x790 <main>
  f2:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <_exit>

000000f6 <__bad_interrupt>:
  f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <setup>:
  temperature = temperature - 273.15; // Convert Kelvin to Celsius
  return temperature;
}

void setup() {
  Serial.begin(BAUD_RATE);
  fa:	40 e8       	ldi	r20, 0x80	; 128
  fc:	55 e2       	ldi	r21, 0x25	; 37
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	8e e1       	ldi	r24, 0x1E	; 30
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN14HardwareSerial5beginEm>

  pinMode(SENSOR_PIN, INPUT);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 cb 04 	call	0x996	; 0x996 <pinMode>
  pinMode(PHOTOCELL_PIN, INPUT);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 cb 04 	call	0x996	; 0x996 <pinMode>

  Serial.println("Comencing!");
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	71 e0       	ldi	r23, 0x01	; 1
 11e:	8e e1       	ldi	r24, 0x1E	; 30
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <_ZN5Print7printlnEPKc>

00000126 <loop>:
void loop() {
  //assign to variable 'temp' the value of the temperature calculated by thermistor
//  temp = int(thermister(analogRead(SENSOR_PIN)));
//  Serial.print("\nTHERMISTOR: ");
//  Serial.println(temp);
  photocellReading = analogRead(PHOTOCELL_PIN);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 aa 04 	call	0x954	; 0x954 <analogRead>
 12c:	90 93 1d 01 	sts	0x011D, r25
 130:	80 93 1c 01 	sts	0x011C, r24

  Serial.println(photocellReading);
 134:	4a e0       	ldi	r20, 0x0A	; 10
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	bc 01       	movw	r22, r24
 13a:	8e e1       	ldi	r24, 0x1E	; 30
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 ae 03 	call	0x75c	; 0x75c <_ZN5Print7printlnEii>
//  }
//  else {
//    Serial.println("Very bright");
//  }

  delay(500);
 142:	64 ef       	ldi	r22, 0xF4	; 244
 144:	71 e0       	ldi	r23, 0x01	; 1
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0c 94 49 04 	jmp	0x892	; 0x892 <delay>

0000014e <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 14e:	fc 01       	movw	r30, r24
 150:	84 85       	ldd	r24, Z+12	; 0x0c
 152:	95 85       	ldd	r25, Z+13	; 0x0d
 154:	fc 01       	movw	r30, r24
 156:	e0 5c       	subi	r30, 0xC0	; 192
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	20 81       	ld	r18, Z
 15c:	31 81       	ldd	r19, Z+1	; 0x01
 15e:	fc 01       	movw	r30, r24
 160:	ee 5b       	subi	r30, 0xBE	; 190
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	80 81       	ld	r24, Z
 166:	91 81       	ldd	r25, Z+1	; 0x01
 168:	28 1b       	sub	r18, r24
 16a:	39 0b       	sbc	r19, r25
 16c:	2f 73       	andi	r18, 0x3F	; 63
 16e:	33 27       	eor	r19, r19
}
 170:	c9 01       	movw	r24, r18
 172:	08 95       	ret

00000174 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 174:	fc 01       	movw	r30, r24
 176:	84 85       	ldd	r24, Z+12	; 0x0c
 178:	95 85       	ldd	r25, Z+13	; 0x0d
 17a:	fc 01       	movw	r30, r24
 17c:	e0 5c       	subi	r30, 0xC0	; 192
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	40 81       	ld	r20, Z
 182:	51 81       	ldd	r21, Z+1	; 0x01
 184:	fc 01       	movw	r30, r24
 186:	ee 5b       	subi	r30, 0xBE	; 190
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	20 81       	ld	r18, Z
 18c:	31 81       	ldd	r19, Z+1	; 0x01
 18e:	42 17       	cp	r20, r18
 190:	53 07       	cpc	r21, r19
 192:	41 f0       	breq	.+16     	; 0x1a4 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 194:	01 90       	ld	r0, Z+
 196:	f0 81       	ld	r31, Z
 198:	e0 2d       	mov	r30, r0
 19a:	e8 0f       	add	r30, r24
 19c:	f9 1f       	adc	r31, r25
 19e:	20 81       	ld	r18, Z
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
 1a8:	c9 01       	movw	r24, r18
 1aa:	08 95       	ret

000001ac <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 1ac:	fc 01       	movw	r30, r24
 1ae:	84 85       	ldd	r24, Z+12	; 0x0c
 1b0:	95 85       	ldd	r25, Z+13	; 0x0d
 1b2:	fc 01       	movw	r30, r24
 1b4:	e0 5c       	subi	r30, 0xC0	; 192
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	40 81       	ld	r20, Z
 1ba:	51 81       	ldd	r21, Z+1	; 0x01
 1bc:	fc 01       	movw	r30, r24
 1be:	ee 5b       	subi	r30, 0xBE	; 190
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	20 81       	ld	r18, Z
 1c4:	31 81       	ldd	r19, Z+1	; 0x01
 1c6:	42 17       	cp	r20, r18
 1c8:	53 07       	cpc	r21, r19
 1ca:	81 f0       	breq	.+32     	; 0x1ec <_ZN14HardwareSerial4readEv+0x40>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 1cc:	a0 81       	ld	r26, Z
 1ce:	b1 81       	ldd	r27, Z+1	; 0x01
 1d0:	a8 0f       	add	r26, r24
 1d2:	b9 1f       	adc	r27, r25
 1d4:	8c 91       	ld	r24, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
 1d6:	20 81       	ld	r18, Z
 1d8:	31 81       	ldd	r19, Z+1	; 0x01
 1da:	2f 5f       	subi	r18, 0xFF	; 255
 1dc:	3f 4f       	sbci	r19, 0xFF	; 255
 1de:	2f 73       	andi	r18, 0x3F	; 63
 1e0:	33 27       	eor	r19, r19
 1e2:	31 83       	std	Z+1, r19	; 0x01
 1e4:	20 83       	st	Z, r18
    return c;
 1e6:	28 2f       	mov	r18, r24
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <_ZN14HardwareSerial4readEv+0x44>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
 1f0:	c9 01       	movw	r24, r18
 1f2:	08 95       	ret

000001f4 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
 1f4:	fc 01       	movw	r30, r24
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
 1f6:	81 a1       	ldd	r24, Z+33	; 0x21
 1f8:	88 23       	and	r24, r24
 1fa:	29 f0       	breq	.+10     	; 0x206 <_ZN14HardwareSerial5flushEv+0x12>
 1fc:	a4 89       	ldd	r26, Z+20	; 0x14
 1fe:	b5 89       	ldd	r27, Z+21	; 0x15
 200:	8c 91       	ld	r24, X
 202:	86 ff       	sbrs	r24, 6
 204:	fb cf       	rjmp	.-10     	; 0x1fc <_ZN14HardwareSerial5flushEv+0x8>
  transmitting = false;
 206:	11 a2       	std	Z+33, r1	; 0x21
 208:	08 95       	ret

0000020a <_ZN14HardwareSerial5writeEh>:
}

size_t HardwareSerial::write(uint8_t c)
{
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	fc 01       	movw	r30, r24
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
 210:	26 85       	ldd	r18, Z+14	; 0x0e
 212:	37 85       	ldd	r19, Z+15	; 0x0f
 214:	d9 01       	movw	r26, r18
 216:	a0 5c       	subi	r26, 0xC0	; 192
 218:	bf 4f       	sbci	r27, 0xFF	; 255
 21a:	8d 91       	ld	r24, X+
 21c:	9c 91       	ld	r25, X
 21e:	11 97       	sbiw	r26, 0x01	; 1
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	8f 73       	andi	r24, 0x3F	; 63
 224:	99 27       	eor	r25, r25
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
 226:	e9 01       	movw	r28, r18
 228:	ce 5b       	subi	r28, 0xBE	; 190
 22a:	df 4f       	sbci	r29, 0xFF	; 255
 22c:	48 81       	ld	r20, Y
 22e:	59 81       	ldd	r21, Y+1	; 0x01
 230:	84 17       	cp	r24, r20
 232:	95 07       	cpc	r25, r21
 234:	d9 f3       	breq	.-10     	; 0x22c <_ZN14HardwareSerial5writeEh+0x22>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
 236:	0d 90       	ld	r0, X+
 238:	bc 91       	ld	r27, X
 23a:	a0 2d       	mov	r26, r0
 23c:	a2 0f       	add	r26, r18
 23e:	b3 1f       	adc	r27, r19
 240:	6c 93       	st	X, r22
  _tx_buffer->head = i;
 242:	a6 85       	ldd	r26, Z+14	; 0x0e
 244:	b7 85       	ldd	r27, Z+15	; 0x0f
 246:	a0 5c       	subi	r26, 0xC0	; 192
 248:	bf 4f       	sbci	r27, 0xFF	; 255
 24a:	11 96       	adiw	r26, 0x01	; 1
 24c:	9c 93       	st	X, r25
 24e:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
 250:	a6 89       	ldd	r26, Z+22	; 0x16
 252:	b7 89       	ldd	r27, Z+23	; 0x17
 254:	2c 91       	ld	r18, X
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	07 8c       	ldd	r0, Z+31	; 0x1f
 25c:	02 c0       	rjmp	.+4      	; 0x262 <_ZN14HardwareSerial5writeEh+0x58>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <_ZN14HardwareSerial5writeEh+0x54>
 266:	28 2b       	or	r18, r24
 268:	2c 93       	st	X, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	81 a3       	std	Z+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
 26e:	04 88       	ldd	r0, Z+20	; 0x14
 270:	f5 89       	ldd	r31, Z+21	; 0x15
 272:	e0 2d       	mov	r30, r0
 274:	80 81       	ld	r24, Z
 276:	80 64       	ori	r24, 0x40	; 64
 278:	80 83       	st	Z, r24
  
  return 1;
}
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
 284:	08 95       	ret

00000286 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
 286:	1f 92       	push	r1
 288:	0f 92       	push	r0
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	0f 92       	push	r0
 28e:	11 24       	eor	r1, r1
 290:	2f 93       	push	r18
 292:	3f 93       	push	r19
 294:	4f 93       	push	r20
 296:	8f 93       	push	r24
 298:	9f 93       	push	r25
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
 29e:	80 91 c0 00 	lds	r24, 0x00C0
 2a2:	82 fd       	sbrc	r24, 2
 2a4:	1c c0       	rjmp	.+56     	; 0x2de <__vector_18+0x58>
      unsigned char c = UDR0;
 2a6:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
 2aa:	80 91 c4 01 	lds	r24, 0x01C4
 2ae:	90 91 c5 01 	lds	r25, 0x01C5
 2b2:	01 96       	adiw	r24, 0x01	; 1
 2b4:	8f 73       	andi	r24, 0x3F	; 63
 2b6:	99 27       	eor	r25, r25

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
 2b8:	20 91 c6 01 	lds	r18, 0x01C6
 2bc:	30 91 c7 01 	lds	r19, 0x01C7
 2c0:	82 17       	cp	r24, r18
 2c2:	93 07       	cpc	r25, r19
 2c4:	71 f0       	breq	.+28     	; 0x2e2 <__vector_18+0x5c>
    buffer->buffer[buffer->head] = c;
 2c6:	e0 91 c4 01 	lds	r30, 0x01C4
 2ca:	f0 91 c5 01 	lds	r31, 0x01C5
 2ce:	ec 57       	subi	r30, 0x7C	; 124
 2d0:	fe 4f       	sbci	r31, 0xFE	; 254
 2d2:	40 83       	st	Z, r20
    buffer->head = i;
 2d4:	90 93 c5 01 	sts	0x01C5, r25
 2d8:	80 93 c4 01 	sts	0x01C4, r24
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <__vector_18+0x5c>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
 2de:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
 2fa:	8e e1       	ldi	r24, 0x1E	; 30
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 a7 00 	call	0x14e	; 0x14e <_ZN14HardwareSerial9availableEv>
 302:	89 2b       	or	r24, r25
 304:	11 f0       	breq	.+4      	; 0x30a <_Z14serialEventRunv+0x10>
 306:	0c 94 42 01 	jmp	0x284	; 0x284 <_Z11serialEventv>
 30a:	08 95       	ret

0000030c <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	2f 93       	push	r18
 318:	3f 93       	push	r19
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
 322:	20 91 80 01 	lds	r18, 0x0180
 326:	30 91 81 01 	lds	r19, 0x0181
 32a:	80 91 82 01 	lds	r24, 0x0182
 32e:	90 91 83 01 	lds	r25, 0x0183
 332:	28 17       	cp	r18, r24
 334:	39 07       	cpc	r19, r25
 336:	31 f4       	brne	.+12     	; 0x344 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
 338:	80 91 c1 00 	lds	r24, 0x00C1
 33c:	8f 7d       	andi	r24, 0xDF	; 223
 33e:	80 93 c1 00 	sts	0x00C1, r24
 342:	14 c0       	rjmp	.+40     	; 0x36c <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 344:	e0 91 82 01 	lds	r30, 0x0182
 348:	f0 91 83 01 	lds	r31, 0x0183
 34c:	e0 5c       	subi	r30, 0xC0	; 192
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
 352:	80 91 82 01 	lds	r24, 0x0182
 356:	90 91 83 01 	lds	r25, 0x0183
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	8f 73       	andi	r24, 0x3F	; 63
 35e:	99 27       	eor	r25, r25
 360:	90 93 83 01 	sts	0x0183, r25
 364:	80 93 82 01 	sts	0x0182, r24
	
  #if defined(UDR0)
    UDR0 = c;
 368:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
 36c:	ff 91       	pop	r31
 36e:	ef 91       	pop	r30
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	3f 91       	pop	r19
 376:	2f 91       	pop	r18
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
 382:	cf 92       	push	r12
 384:	df 92       	push	r13
 386:	ef 92       	push	r14
 388:	ff 92       	push	r15
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	ec 01       	movw	r28, r24
 390:	6a 01       	movw	r12, r20
 392:	7b 01       	movw	r14, r22
  }
#endif

try_again:
  
  if (use_u2x) {
 394:	41 15       	cp	r20, r1
 396:	81 ee       	ldi	r24, 0xE1	; 225
 398:	58 07       	cpc	r21, r24
 39a:	61 05       	cpc	r22, r1
 39c:	71 05       	cpc	r23, r1
 39e:	f9 f0       	breq	.+62     	; 0x3de <_ZN14HardwareSerial5beginEm+0x5c>
    *_ucsra = 1 << _u2x;
 3a0:	ec 89       	ldd	r30, Y+20	; 0x14
 3a2:	fd 89       	ldd	r31, Y+21	; 0x15
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	08 a0       	ldd	r0, Y+32	; 0x20
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <_ZN14HardwareSerial5beginEm+0x2e>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	0a 94       	dec	r0
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <_ZN14HardwareSerial5beginEm+0x2a>
 3b4:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	79 e0       	ldi	r23, 0x09	; 9
 3ba:	8d e3       	ldi	r24, 0x3D	; 61
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	a7 01       	movw	r20, r14
 3c0:	96 01       	movw	r18, r12
 3c2:	0e 94 03 05 	call	0xa06	; 0xa06 <__udivmodsi4>
 3c6:	21 50       	subi	r18, 0x01	; 1
 3c8:	31 09       	sbc	r19, r1
 3ca:	41 09       	sbc	r20, r1
 3cc:	51 09       	sbc	r21, r1
 3ce:	56 95       	lsr	r21
 3d0:	47 95       	ror	r20
 3d2:	37 95       	ror	r19
 3d4:	27 95       	ror	r18
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
 3d6:	21 15       	cp	r18, r1
 3d8:	80 e1       	ldi	r24, 0x10	; 16
 3da:	38 07       	cpc	r19, r24
 3dc:	98 f0       	brcs	.+38     	; 0x404 <_ZN14HardwareSerial5beginEm+0x82>
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
 3de:	ec 89       	ldd	r30, Y+20	; 0x14
 3e0:	fd 89       	ldd	r31, Y+21	; 0x15
 3e2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 3e4:	60 e8       	ldi	r22, 0x80	; 128
 3e6:	74 e8       	ldi	r23, 0x84	; 132
 3e8:	8e e1       	ldi	r24, 0x1E	; 30
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a7 01       	movw	r20, r14
 3ee:	96 01       	movw	r18, r12
 3f0:	0e 94 03 05 	call	0xa06	; 0xa06 <__udivmodsi4>
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	31 09       	sbc	r19, r1
 3f8:	41 09       	sbc	r20, r1
 3fa:	51 09       	sbc	r21, r1
 3fc:	56 95       	lsr	r21
 3fe:	47 95       	ror	r20
 400:	37 95       	ror	r19
 402:	27 95       	ror	r18
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 404:	e8 89       	ldd	r30, Y+16	; 0x10
 406:	f9 89       	ldd	r31, Y+17	; 0x11
 408:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 40a:	ea 89       	ldd	r30, Y+18	; 0x12
 40c:	fb 89       	ldd	r31, Y+19	; 0x13
 40e:	20 83       	st	Z, r18

  transmitting = false;
 410:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
 412:	ee 89       	ldd	r30, Y+22	; 0x16
 414:	ff 89       	ldd	r31, Y+23	; 0x17
 416:	40 81       	ld	r20, Z
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	9c 01       	movw	r18, r24
 41e:	0c 8c       	ldd	r0, Y+28	; 0x1c
 420:	02 c0       	rjmp	.+4      	; 0x426 <_ZN14HardwareSerial5beginEm+0xa4>
 422:	22 0f       	add	r18, r18
 424:	33 1f       	adc	r19, r19
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <_ZN14HardwareSerial5beginEm+0xa0>
 42a:	42 2b       	or	r20, r18
 42c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
 42e:	ee 89       	ldd	r30, Y+22	; 0x16
 430:	ff 89       	ldd	r31, Y+23	; 0x17
 432:	40 81       	ld	r20, Z
 434:	9c 01       	movw	r18, r24
 436:	0d 8c       	ldd	r0, Y+29	; 0x1d
 438:	02 c0       	rjmp	.+4      	; 0x43e <_ZN14HardwareSerial5beginEm+0xbc>
 43a:	22 0f       	add	r18, r18
 43c:	33 1f       	adc	r19, r19
 43e:	0a 94       	dec	r0
 440:	e2 f7       	brpl	.-8      	; 0x43a <_ZN14HardwareSerial5beginEm+0xb8>
 442:	42 2b       	or	r20, r18
 444:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
 446:	ee 89       	ldd	r30, Y+22	; 0x16
 448:	ff 89       	ldd	r31, Y+23	; 0x17
 44a:	40 81       	ld	r20, Z
 44c:	9c 01       	movw	r18, r24
 44e:	0e 8c       	ldd	r0, Y+30	; 0x1e
 450:	02 c0       	rjmp	.+4      	; 0x456 <_ZN14HardwareSerial5beginEm+0xd4>
 452:	22 0f       	add	r18, r18
 454:	33 1f       	adc	r19, r19
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <_ZN14HardwareSerial5beginEm+0xd0>
 45a:	42 2b       	or	r20, r18
 45c:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
 45e:	ee 89       	ldd	r30, Y+22	; 0x16
 460:	ff 89       	ldd	r31, Y+23	; 0x17
 462:	20 81       	ld	r18, Z
 464:	0f 8c       	ldd	r0, Y+31	; 0x1f
 466:	02 c0       	rjmp	.+4      	; 0x46c <_ZN14HardwareSerial5beginEm+0xea>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	0a 94       	dec	r0
 46e:	e2 f7       	brpl	.-8      	; 0x468 <_ZN14HardwareSerial5beginEm+0xe6>
 470:	80 95       	com	r24
 472:	82 23       	and	r24, r18
 474:	80 83       	st	Z, r24
}
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	df 90       	pop	r13
 480:	cf 90       	pop	r12
 482:	08 95       	ret

00000484 <_GLOBAL__sub_I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 484:	10 92 21 01 	sts	0x0121, r1
 488:	10 92 20 01 	sts	0x0120, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 48c:	88 ee       	ldi	r24, 0xE8	; 232
 48e:	93 e0       	ldi	r25, 0x03	; 3
 490:	a0 e0       	ldi	r26, 0x00	; 0
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	80 93 22 01 	sts	0x0122, r24
 498:	90 93 23 01 	sts	0x0123, r25
 49c:	a0 93 24 01 	sts	0x0124, r26
 4a0:	b0 93 25 01 	sts	0x0125, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 4a4:	80 e1       	ldi	r24, 0x10	; 16
 4a6:	91 e0       	ldi	r25, 0x01	; 1
 4a8:	90 93 1f 01 	sts	0x011F, r25
 4ac:	80 93 1e 01 	sts	0x011E, r24
{
  _rx_buffer = rx_buffer;
 4b0:	84 e8       	ldi	r24, 0x84	; 132
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	90 93 2b 01 	sts	0x012B, r25
 4b8:	80 93 2a 01 	sts	0x012A, r24
  _tx_buffer = tx_buffer;
 4bc:	80 e4       	ldi	r24, 0x40	; 64
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	90 93 2d 01 	sts	0x012D, r25
 4c4:	80 93 2c 01 	sts	0x012C, r24
  _ubrrh = ubrrh;
 4c8:	85 ec       	ldi	r24, 0xC5	; 197
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	90 93 2f 01 	sts	0x012F, r25
 4d0:	80 93 2e 01 	sts	0x012E, r24
  _ubrrl = ubrrl;
 4d4:	84 ec       	ldi	r24, 0xC4	; 196
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	90 93 31 01 	sts	0x0131, r25
 4dc:	80 93 30 01 	sts	0x0130, r24
  _ucsra = ucsra;
 4e0:	80 ec       	ldi	r24, 0xC0	; 192
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	90 93 33 01 	sts	0x0133, r25
 4e8:	80 93 32 01 	sts	0x0132, r24
  _ucsrb = ucsrb;
 4ec:	81 ec       	ldi	r24, 0xC1	; 193
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	90 93 35 01 	sts	0x0135, r25
 4f4:	80 93 34 01 	sts	0x0134, r24
  _ucsrc = ucsrc;
 4f8:	82 ec       	ldi	r24, 0xC2	; 194
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	90 93 37 01 	sts	0x0137, r25
 500:	80 93 36 01 	sts	0x0136, r24
  _udr = udr;
 504:	86 ec       	ldi	r24, 0xC6	; 198
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	90 93 39 01 	sts	0x0139, r25
 50c:	80 93 38 01 	sts	0x0138, r24
  _rxen = rxen;
 510:	84 e0       	ldi	r24, 0x04	; 4
 512:	80 93 3a 01 	sts	0x013A, r24
  _txen = txen;
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	80 93 3b 01 	sts	0x013B, r24
  _rxcie = rxcie;
 51c:	87 e0       	ldi	r24, 0x07	; 7
 51e:	80 93 3c 01 	sts	0x013C, r24
  _udrie = udrie;
 522:	85 e0       	ldi	r24, 0x05	; 5
 524:	80 93 3d 01 	sts	0x013D, r24
  _u2x = u2x;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	80 93 3e 01 	sts	0x013E, r24
 52e:	08 95       	ret

00000530 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 530:	cf 92       	push	r12
 532:	df 92       	push	r13
 534:	ef 92       	push	r14
 536:	ff 92       	push	r15
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	6c 01       	movw	r12, r24
 542:	eb 01       	movw	r28, r22
 544:	7a 01       	movw	r14, r20
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
 546:	e6 0e       	add	r14, r22
 548:	f7 1e       	adc	r15, r23
{
  size_t n = 0;
 54a:	00 e0       	ldi	r16, 0x00	; 0
 54c:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
 54e:	0b c0       	rjmp	.+22     	; 0x566 <_ZN5Print5writeEPKhj+0x36>
    n += write(*buffer++);
 550:	69 91       	ld	r22, Y+
 552:	d6 01       	movw	r26, r12
 554:	ed 91       	ld	r30, X+
 556:	fc 91       	ld	r31, X
 558:	01 90       	ld	r0, Z+
 55a:	f0 81       	ld	r31, Z
 55c:	e0 2d       	mov	r30, r0
 55e:	c6 01       	movw	r24, r12
 560:	09 95       	icall
 562:	08 0f       	add	r16, r24
 564:	19 1f       	adc	r17, r25

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 566:	ce 15       	cp	r28, r14
 568:	df 05       	cpc	r29, r15
 56a:	91 f7       	brne	.-28     	; 0x550 <_ZN5Print5writeEPKhj+0x20>
    n += write(*buffer++);
  }
  return n;
}
 56c:	c8 01       	movw	r24, r16
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	1f 91       	pop	r17
 574:	0f 91       	pop	r16
 576:	ff 90       	pop	r15
 578:	ef 90       	pop	r14
 57a:	df 90       	pop	r13
 57c:	cf 90       	pop	r12
 57e:	08 95       	ret

00000580 <_ZN5Print5writeEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 580:	61 15       	cp	r22, r1
 582:	71 05       	cpc	r23, r1
 584:	81 f0       	breq	.+32     	; 0x5a6 <_ZN5Print5writeEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
 586:	db 01       	movw	r26, r22
 588:	0d 90       	ld	r0, X+
 58a:	00 20       	and	r0, r0
 58c:	e9 f7       	brne	.-6      	; 0x588 <_ZN5Print5writeEPKc+0x8>
 58e:	ad 01       	movw	r20, r26
 590:	41 50       	subi	r20, 0x01	; 1
 592:	51 09       	sbc	r21, r1
 594:	46 1b       	sub	r20, r22
 596:	57 0b       	sbc	r21, r23
 598:	dc 01       	movw	r26, r24
 59a:	ed 91       	ld	r30, X+
 59c:	fc 91       	ld	r31, X
 59e:	02 80       	ldd	r0, Z+2	; 0x02
 5a0:	f3 81       	ldd	r31, Z+3	; 0x03
 5a2:	e0 2d       	mov	r30, r0
 5a4:	09 94       	ijmp
    }
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	08 95       	ret

000005ac <_ZN5Print5printEc>:
    size_t print(const Printable&);

    size_t println(const __FlashStringHelper *);
    size_t println(const String &s);
    size_t println(const char[]);
    size_t println(char);
 5ac:	dc 01       	movw	r26, r24
 5ae:	ed 91       	ld	r30, X+
 5b0:	fc 91       	ld	r31, X
 5b2:	01 90       	ld	r0, Z+
 5b4:	f0 81       	ld	r31, Z
 5b6:	e0 2d       	mov	r30, r0
 5b8:	09 94       	ijmp

000005ba <_ZN5Print7printlnEv>:
 5ba:	0f 93       	push	r16
 5bc:	1f 93       	push	r17
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	ec 01       	movw	r28, r24
 5c4:	6d e0       	ldi	r22, 0x0D	; 13
 5c6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_ZN5Print5printEc>
 5ca:	8c 01       	movw	r16, r24
 5cc:	6a e0       	ldi	r22, 0x0A	; 10
 5ce:	ce 01       	movw	r24, r28
 5d0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_ZN5Print5printEc>
 5d4:	9c 01       	movw	r18, r24
 5d6:	20 0f       	add	r18, r16
 5d8:	31 1f       	adc	r19, r17
 5da:	c9 01       	movw	r24, r18
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	1f 91       	pop	r17
 5e2:	0f 91       	pop	r16
 5e4:	08 95       	ret

000005e6 <_ZN5Print7printlnEPKc>:
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	ec 01       	movw	r28, r24
    size_t print(int, int = DEC);
    size_t print(unsigned int, int = DEC);
    size_t print(long, int = DEC);
    size_t print(unsigned long, int = DEC);
    size_t print(double, int = 2);
    size_t print(const Printable&);
 5f0:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN5Print5writeEPKc>
 5f4:	8c 01       	movw	r16, r24
 5f6:	ce 01       	movw	r24, r28
 5f8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN5Print7printlnEv>
 5fc:	98 01       	movw	r18, r16
 5fe:	28 0f       	add	r18, r24
 600:	39 1f       	adc	r19, r25
 602:	c9 01       	movw	r24, r18
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	08 95       	ret

0000060e <_ZN5Print11printNumberEmh>:
 60e:	4f 92       	push	r4
 610:	5f 92       	push	r5
 612:	6f 92       	push	r6
 614:	7f 92       	push	r7
 616:	9f 92       	push	r9
 618:	af 92       	push	r10
 61a:	bf 92       	push	r11
 61c:	cf 92       	push	r12
 61e:	df 92       	push	r13
 620:	ef 92       	push	r14
 622:	ff 92       	push	r15
 624:	0f 93       	push	r16
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	cd b7       	in	r28, 0x3d	; 61
 62e:	de b7       	in	r29, 0x3e	; 62
 630:	a1 97       	sbiw	r28, 0x21	; 33
 632:	0f b6       	in	r0, 0x3f	; 63
 634:	f8 94       	cli
 636:	de bf       	out	0x3e, r29	; 62
 638:	0f be       	out	0x3f, r0	; 63
 63a:	cd bf       	out	0x3d, r28	; 61
 63c:	5c 01       	movw	r10, r24
 63e:	6a 01       	movw	r12, r20
 640:	7b 01       	movw	r14, r22
 642:	92 2e       	mov	r9, r18
 644:	19 a2       	std	Y+33, r1	; 0x21
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	82 17       	cp	r24, r18
 64a:	10 f0       	brcs	.+4      	; 0x650 <_ZN5Print11printNumberEmh+0x42>
 64c:	8a e0       	ldi	r24, 0x0A	; 10
 64e:	98 2e       	mov	r9, r24
 650:	8e 01       	movw	r16, r28
 652:	0f 5d       	subi	r16, 0xDF	; 223
 654:	1f 4f       	sbci	r17, 0xFF	; 255
 656:	49 2c       	mov	r4, r9
 658:	51 2c       	mov	r5, r1
 65a:	61 2c       	mov	r6, r1
 65c:	71 2c       	mov	r7, r1
 65e:	c7 01       	movw	r24, r14
 660:	b6 01       	movw	r22, r12
 662:	a3 01       	movw	r20, r6
 664:	92 01       	movw	r18, r4
 666:	0e 94 03 05 	call	0xa06	; 0xa06 <__udivmodsi4>
 66a:	8c 2d       	mov	r24, r12
 66c:	92 9e       	mul	r9, r18
 66e:	80 19       	sub	r24, r0
 670:	11 24       	eor	r1, r1
 672:	01 50       	subi	r16, 0x01	; 1
 674:	11 09       	sbc	r17, r1
 676:	8a 30       	cpi	r24, 0x0A	; 10
 678:	14 f4       	brge	.+4      	; 0x67e <_ZN5Print11printNumberEmh+0x70>
 67a:	80 5d       	subi	r24, 0xD0	; 208
 67c:	01 c0       	rjmp	.+2      	; 0x680 <_ZN5Print11printNumberEmh+0x72>
 67e:	89 5c       	subi	r24, 0xC9	; 201
 680:	f8 01       	movw	r30, r16
 682:	80 83       	st	Z, r24
 684:	69 01       	movw	r12, r18
 686:	7a 01       	movw	r14, r20
 688:	c1 14       	cp	r12, r1
 68a:	d1 04       	cpc	r13, r1
 68c:	e1 04       	cpc	r14, r1
 68e:	f1 04       	cpc	r15, r1
 690:	31 f7       	brne	.-52     	; 0x65e <_ZN5Print11printNumberEmh+0x50>
 692:	b8 01       	movw	r22, r16
 694:	c5 01       	movw	r24, r10
 696:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN5Print5writeEPKc>
 69a:	a1 96       	adiw	r28, 0x21	; 33
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	f8 94       	cli
 6a0:	de bf       	out	0x3e, r29	; 62
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	cd bf       	out	0x3d, r28	; 61
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	1f 91       	pop	r17
 6ac:	0f 91       	pop	r16
 6ae:	ff 90       	pop	r15
 6b0:	ef 90       	pop	r14
 6b2:	df 90       	pop	r13
 6b4:	cf 90       	pop	r12
 6b6:	bf 90       	pop	r11
 6b8:	af 90       	pop	r10
 6ba:	9f 90       	pop	r9
 6bc:	7f 90       	pop	r7
 6be:	6f 90       	pop	r6
 6c0:	5f 90       	pop	r5
 6c2:	4f 90       	pop	r4
 6c4:	08 95       	ret

000006c6 <_ZN5Print5printEli>:
 6c6:	cf 92       	push	r12
 6c8:	df 92       	push	r13
 6ca:	ef 92       	push	r14
 6cc:	ff 92       	push	r15
 6ce:	0f 93       	push	r16
 6d0:	1f 93       	push	r17
 6d2:	cf 93       	push	r28
 6d4:	df 93       	push	r29
 6d6:	ec 01       	movw	r28, r24
 6d8:	6a 01       	movw	r12, r20
 6da:	7b 01       	movw	r14, r22
 6dc:	21 15       	cp	r18, r1
 6de:	31 05       	cpc	r19, r1
 6e0:	79 f4       	brne	.+30     	; 0x700 <_ZN5Print5printEli+0x3a>
 6e2:	e8 81       	ld	r30, Y
 6e4:	f9 81       	ldd	r31, Y+1	; 0x01
 6e6:	01 90       	ld	r0, Z+
 6e8:	f0 81       	ld	r31, Z
 6ea:	e0 2d       	mov	r30, r0
 6ec:	64 2f       	mov	r22, r20
 6ee:	df 91       	pop	r29
 6f0:	cf 91       	pop	r28
 6f2:	1f 91       	pop	r17
 6f4:	0f 91       	pop	r16
 6f6:	ff 90       	pop	r15
 6f8:	ef 90       	pop	r14
 6fa:	df 90       	pop	r13
 6fc:	cf 90       	pop	r12
 6fe:	09 94       	ijmp
 700:	2a 30       	cpi	r18, 0x0A	; 10
 702:	31 05       	cpc	r19, r1
 704:	19 f4       	brne	.+6      	; 0x70c <_ZN5Print5printEli+0x46>
 706:	77 fd       	sbrc	r23, 7
 708:	0e c0       	rjmp	.+28     	; 0x726 <_ZN5Print5printEli+0x60>
 70a:	2a e0       	ldi	r18, 0x0A	; 10
 70c:	b7 01       	movw	r22, r14
 70e:	a6 01       	movw	r20, r12
 710:	ce 01       	movw	r24, r28
 712:	df 91       	pop	r29
 714:	cf 91       	pop	r28
 716:	1f 91       	pop	r17
 718:	0f 91       	pop	r16
 71a:	ff 90       	pop	r15
 71c:	ef 90       	pop	r14
 71e:	df 90       	pop	r13
 720:	cf 90       	pop	r12
 722:	0c 94 07 03 	jmp	0x60e	; 0x60e <_ZN5Print11printNumberEmh>
 726:	6d e2       	ldi	r22, 0x2D	; 45
 728:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_ZN5Print5printEc>
 72c:	8c 01       	movw	r16, r24
 72e:	44 27       	eor	r20, r20
 730:	55 27       	eor	r21, r21
 732:	ba 01       	movw	r22, r20
 734:	4c 19       	sub	r20, r12
 736:	5d 09       	sbc	r21, r13
 738:	6e 09       	sbc	r22, r14
 73a:	7f 09       	sbc	r23, r15
 73c:	2a e0       	ldi	r18, 0x0A	; 10
 73e:	ce 01       	movw	r24, r28
 740:	0e 94 07 03 	call	0x60e	; 0x60e <_ZN5Print11printNumberEmh>
 744:	08 0f       	add	r16, r24
 746:	19 1f       	adc	r17, r25
 748:	c8 01       	movw	r24, r16
 74a:	df 91       	pop	r29
 74c:	cf 91       	pop	r28
 74e:	1f 91       	pop	r17
 750:	0f 91       	pop	r16
 752:	ff 90       	pop	r15
 754:	ef 90       	pop	r14
 756:	df 90       	pop	r13
 758:	cf 90       	pop	r12
 75a:	08 95       	ret

0000075c <_ZN5Print7printlnEii>:
 75c:	0f 93       	push	r16
 75e:	1f 93       	push	r17
 760:	cf 93       	push	r28
 762:	df 93       	push	r29
 764:	ec 01       	movw	r28, r24
 766:	9a 01       	movw	r18, r20
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
};

 768:	ab 01       	movw	r20, r22
 76a:	66 27       	eor	r22, r22
 76c:	57 fd       	sbrc	r21, 7
 76e:	60 95       	com	r22
 770:	76 2f       	mov	r23, r22
 772:	0e 94 63 03 	call	0x6c6	; 0x6c6 <_ZN5Print5printEli>
 776:	8c 01       	movw	r16, r24
 778:	ce 01       	movw	r24, r28
 77a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_ZN5Print7printlnEv>
 77e:	98 01       	movw	r18, r16
 780:	28 0f       	add	r18, r24
 782:	39 1f       	adc	r19, r25
 784:	c9 01       	movw	r24, r18
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	1f 91       	pop	r17
 78c:	0f 91       	pop	r16
 78e:	08 95       	ret

00000790 <main>:
#include <Arduino.h>

int main(void)
{
	init();
 790:	0e 94 6f 04 	call	0x8de	; 0x8de <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 794:	0e 94 7d 00 	call	0xfa	; 0xfa <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 798:	cd e7       	ldi	r28, 0x7D	; 125
 79a:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 79c:	0e 94 93 00 	call	0x126	; 0x126 <loop>
		if (serialEventRun) serialEventRun();
 7a0:	20 97       	sbiw	r28, 0x00	; 0
 7a2:	e1 f3       	breq	.-8      	; 0x79c <main+0xc>
 7a4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <_Z14serialEventRunv>
 7a8:	f9 cf       	rjmp	.-14     	; 0x79c <main+0xc>

000007aa <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
 7aa:	1f 92       	push	r1
 7ac:	0f 92       	push	r0
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	0f 92       	push	r0
 7b2:	11 24       	eor	r1, r1
 7b4:	2f 93       	push	r18
 7b6:	3f 93       	push	r19
 7b8:	8f 93       	push	r24
 7ba:	9f 93       	push	r25
 7bc:	af 93       	push	r26
 7be:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 7c0:	80 91 c8 01 	lds	r24, 0x01C8
 7c4:	90 91 c9 01 	lds	r25, 0x01C9
 7c8:	a0 91 ca 01 	lds	r26, 0x01CA
 7cc:	b0 91 cb 01 	lds	r27, 0x01CB
	unsigned char f = timer0_fract;
 7d0:	30 91 d0 01 	lds	r19, 0x01D0

	m += MILLIS_INC;
	f += FRACT_INC;
 7d4:	23 2f       	mov	r18, r19
 7d6:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 7d8:	2d 37       	cpi	r18, 0x7D	; 125
 7da:	20 f4       	brcc	.+8      	; 0x7e4 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 7dc:	01 96       	adiw	r24, 0x01	; 1
 7de:	a1 1d       	adc	r26, r1
 7e0:	b1 1d       	adc	r27, r1
 7e2:	05 c0       	rjmp	.+10     	; 0x7ee <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 7e4:	23 2f       	mov	r18, r19
 7e6:	2a 57       	subi	r18, 0x7A	; 122
		m += 1;
 7e8:	02 96       	adiw	r24, 0x02	; 2
 7ea:	a1 1d       	adc	r26, r1
 7ec:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 7ee:	20 93 d0 01 	sts	0x01D0, r18
	timer0_millis = m;
 7f2:	80 93 c8 01 	sts	0x01C8, r24
 7f6:	90 93 c9 01 	sts	0x01C9, r25
 7fa:	a0 93 ca 01 	sts	0x01CA, r26
 7fe:	b0 93 cb 01 	sts	0x01CB, r27
	timer0_overflow_count++;
 802:	80 91 cc 01 	lds	r24, 0x01CC
 806:	90 91 cd 01 	lds	r25, 0x01CD
 80a:	a0 91 ce 01 	lds	r26, 0x01CE
 80e:	b0 91 cf 01 	lds	r27, 0x01CF
 812:	01 96       	adiw	r24, 0x01	; 1
 814:	a1 1d       	adc	r26, r1
 816:	b1 1d       	adc	r27, r1
 818:	80 93 cc 01 	sts	0x01CC, r24
 81c:	90 93 cd 01 	sts	0x01CD, r25
 820:	a0 93 ce 01 	sts	0x01CE, r26
 824:	b0 93 cf 01 	sts	0x01CF, r27
}
 828:	bf 91       	pop	r27
 82a:	af 91       	pop	r26
 82c:	9f 91       	pop	r25
 82e:	8f 91       	pop	r24
 830:	3f 91       	pop	r19
 832:	2f 91       	pop	r18
 834:	0f 90       	pop	r0
 836:	0f be       	out	0x3f, r0	; 63
 838:	0f 90       	pop	r0
 83a:	1f 90       	pop	r1
 83c:	18 95       	reti

0000083e <micros>:
	SREG = oldSREG;

	return m;
}

unsigned long micros() {
 83e:	0f 93       	push	r16
 840:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 842:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
 844:	f8 94       	cli
	m = timer0_overflow_count;
 846:	00 91 cc 01 	lds	r16, 0x01CC
 84a:	10 91 cd 01 	lds	r17, 0x01CD
 84e:	20 91 ce 01 	lds	r18, 0x01CE
 852:	30 91 cf 01 	lds	r19, 0x01CF
#if defined(TCNT0)
	t = TCNT0;
 856:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 858:	a8 9b       	sbis	0x15, 0	; 21
 85a:	06 c0       	rjmp	.+12     	; 0x868 <micros+0x2a>
 85c:	8f 3f       	cpi	r24, 0xFF	; 255
 85e:	21 f0       	breq	.+8      	; 0x868 <micros+0x2a>
		m++;
 860:	0f 5f       	subi	r16, 0xFF	; 255
 862:	1f 4f       	sbci	r17, 0xFF	; 255
 864:	2f 4f       	sbci	r18, 0xFF	; 255
 866:	3f 4f       	sbci	r19, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 868:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 86a:	32 2f       	mov	r19, r18
 86c:	21 2f       	mov	r18, r17
 86e:	10 2f       	mov	r17, r16
 870:	00 27       	eor	r16, r16
 872:	08 0f       	add	r16, r24
 874:	11 1d       	adc	r17, r1
 876:	21 1d       	adc	r18, r1
 878:	31 1d       	adc	r19, r1
 87a:	42 e0       	ldi	r20, 0x02	; 2
 87c:	00 0f       	add	r16, r16
 87e:	11 1f       	adc	r17, r17
 880:	22 1f       	adc	r18, r18
 882:	33 1f       	adc	r19, r19
 884:	4a 95       	dec	r20
 886:	d1 f7       	brne	.-12     	; 0x87c <micros+0x3e>
}
 888:	b8 01       	movw	r22, r16
 88a:	c9 01       	movw	r24, r18
 88c:	1f 91       	pop	r17
 88e:	0f 91       	pop	r16
 890:	08 95       	ret

00000892 <delay>:

void delay(unsigned long ms)
{
 892:	cf 92       	push	r12
 894:	df 92       	push	r13
 896:	ef 92       	push	r14
 898:	ff 92       	push	r15
 89a:	cf 93       	push	r28
 89c:	df 93       	push	r29
 89e:	6b 01       	movw	r12, r22
 8a0:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
 8a2:	0e 94 1f 04 	call	0x83e	; 0x83e <micros>
 8a6:	eb 01       	movw	r28, r22

	while (ms > 0) {
 8a8:	0e c0       	rjmp	.+28     	; 0x8c6 <delay+0x34>
		if (((uint16_t)micros() - start) >= 1000) {
 8aa:	0e 94 1f 04 	call	0x83e	; 0x83e <micros>
 8ae:	6c 1b       	sub	r22, r28
 8b0:	7d 0b       	sbc	r23, r29
 8b2:	68 3e       	cpi	r22, 0xE8	; 232
 8b4:	73 40       	sbci	r23, 0x03	; 3
 8b6:	38 f0       	brcs	.+14     	; 0x8c6 <delay+0x34>
			ms--;
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	c8 1a       	sub	r12, r24
 8bc:	d1 08       	sbc	r13, r1
 8be:	e1 08       	sbc	r14, r1
 8c0:	f1 08       	sbc	r15, r1
			start += 1000;
 8c2:	c8 51       	subi	r28, 0x18	; 24
 8c4:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 8c6:	c1 14       	cp	r12, r1
 8c8:	d1 04       	cpc	r13, r1
 8ca:	e1 04       	cpc	r14, r1
 8cc:	f1 04       	cpc	r15, r1
 8ce:	69 f7       	brne	.-38     	; 0x8aa <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 8d0:	df 91       	pop	r29
 8d2:	cf 91       	pop	r28
 8d4:	ff 90       	pop	r15
 8d6:	ef 90       	pop	r14
 8d8:	df 90       	pop	r13
 8da:	cf 90       	pop	r12
 8dc:	08 95       	ret

000008de <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 8de:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 8e0:	84 b5       	in	r24, 0x24	; 36
 8e2:	82 60       	ori	r24, 0x02	; 2
 8e4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 8e6:	84 b5       	in	r24, 0x24	; 36
 8e8:	81 60       	ori	r24, 0x01	; 1
 8ea:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 8ec:	85 b5       	in	r24, 0x25	; 37
 8ee:	82 60       	ori	r24, 0x02	; 2
 8f0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 8f2:	85 b5       	in	r24, 0x25	; 37
 8f4:	81 60       	ori	r24, 0x01	; 1
 8f6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 8f8:	ee e6       	ldi	r30, 0x6E	; 110
 8fa:	f0 e0       	ldi	r31, 0x00	; 0
 8fc:	80 81       	ld	r24, Z
 8fe:	81 60       	ori	r24, 0x01	; 1
 900:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 902:	e1 e8       	ldi	r30, 0x81	; 129
 904:	f0 e0       	ldi	r31, 0x00	; 0
 906:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 908:	80 81       	ld	r24, Z
 90a:	82 60       	ori	r24, 0x02	; 2
 90c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 90e:	80 81       	ld	r24, Z
 910:	81 60       	ori	r24, 0x01	; 1
 912:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 914:	e0 e8       	ldi	r30, 0x80	; 128
 916:	f0 e0       	ldi	r31, 0x00	; 0
 918:	80 81       	ld	r24, Z
 91a:	81 60       	ori	r24, 0x01	; 1
 91c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 91e:	e1 eb       	ldi	r30, 0xB1	; 177
 920:	f0 e0       	ldi	r31, 0x00	; 0
 922:	80 81       	ld	r24, Z
 924:	84 60       	ori	r24, 0x04	; 4
 926:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 928:	e0 eb       	ldi	r30, 0xB0	; 176
 92a:	f0 e0       	ldi	r31, 0x00	; 0
 92c:	80 81       	ld	r24, Z
 92e:	81 60       	ori	r24, 0x01	; 1
 930:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 932:	ea e7       	ldi	r30, 0x7A	; 122
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	80 81       	ld	r24, Z
 938:	84 60       	ori	r24, 0x04	; 4
 93a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 93c:	80 81       	ld	r24, Z
 93e:	82 60       	ori	r24, 0x02	; 2
 940:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 942:	80 81       	ld	r24, Z
 944:	81 60       	ori	r24, 0x01	; 1
 946:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 948:	80 81       	ld	r24, Z
 94a:	80 68       	ori	r24, 0x80	; 128
 94c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 94e:	10 92 c1 00 	sts	0x00C1, r1
 952:	08 95       	ret

00000954 <analogRead>:
#elif defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644P__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#elif defined(analogPinToChannel) && (defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__))
	pin = analogPinToChannel(pin);
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
 954:	8e 30       	cpi	r24, 0x0E	; 14
 956:	08 f0       	brcs	.+2      	; 0x95a <analogRead+0x6>
 958:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 95a:	87 70       	andi	r24, 0x07	; 7
 95c:	20 91 00 01 	lds	r18, 0x0100
 960:	40 e4       	ldi	r20, 0x40	; 64
 962:	24 9f       	mul	r18, r20
 964:	90 01       	movw	r18, r0
 966:	11 24       	eor	r1, r1
 968:	82 2b       	or	r24, r18
 96a:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 96e:	80 91 7a 00 	lds	r24, 0x007A
 972:	80 64       	ori	r24, 0x40	; 64
 974:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 978:	80 91 7a 00 	lds	r24, 0x007A
 97c:	86 fd       	sbrc	r24, 6
 97e:	fc cf       	rjmp	.-8      	; 0x978 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 980:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
 984:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 988:	93 2f       	mov	r25, r19
 98a:	80 e0       	ldi	r24, 0x00	; 0
 98c:	ac 01       	movw	r20, r24
 98e:	42 2b       	or	r20, r18
 990:	9a 01       	movw	r18, r20
}
 992:	c9 01       	movw	r24, r18
 994:	08 95       	ret

00000996 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 996:	cf 93       	push	r28
 998:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	fc 01       	movw	r30, r24
 99e:	e8 59       	subi	r30, 0x98	; 152
 9a0:	ff 4f       	sbci	r31, 0xFF	; 255
 9a2:	44 91       	lpm	r20, Z+
	uint8_t port = digitalPinToPort(pin);
 9a4:	fc 01       	movw	r30, r24
 9a6:	e4 58       	subi	r30, 0x84	; 132
 9a8:	ff 4f       	sbci	r31, 0xFF	; 255
 9aa:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 9ac:	88 23       	and	r24, r24
 9ae:	41 f1       	breq	.+80     	; 0xa00 <pinMode+0x6a>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	88 0f       	add	r24, r24
 9b4:	99 1f       	adc	r25, r25
 9b6:	fc 01       	movw	r30, r24
 9b8:	e6 56       	subi	r30, 0x66	; 102
 9ba:	ff 4f       	sbci	r31, 0xFF	; 255
 9bc:	25 91       	lpm	r18, Z+
 9be:	34 91       	lpm	r19, Z+
 9c0:	d9 01       	movw	r26, r18
	out = portOutputRegister(port);
 9c2:	80 57       	subi	r24, 0x70	; 112
 9c4:	9f 4f       	sbci	r25, 0xFF	; 255
 9c6:	fc 01       	movw	r30, r24
 9c8:	85 91       	lpm	r24, Z+
 9ca:	94 91       	lpm	r25, Z+
 9cc:	c8 2f       	mov	r28, r24
 9ce:	d9 2f       	mov	r29, r25

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
 9d0:	9f b7       	in	r25, 0x3f	; 63
                cli();
 9d2:	f8 94       	cli
		*reg &= ~bit;
 9d4:	8c 91       	ld	r24, X

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
 9d6:	61 11       	cpse	r22, r1
 9d8:	06 c0       	rjmp	.+12     	; 0x9e6 <pinMode+0x50>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
 9da:	40 95       	com	r20
 9dc:	84 23       	and	r24, r20
 9de:	8c 93       	st	X, r24
		*out &= ~bit;
 9e0:	88 81       	ld	r24, Y
 9e2:	84 23       	and	r24, r20
 9e4:	08 c0       	rjmp	.+16     	; 0x9f6 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 9e6:	62 30       	cpi	r22, 0x02	; 2
 9e8:	41 f4       	brne	.+16     	; 0x9fa <pinMode+0x64>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
 9ea:	24 2f       	mov	r18, r20
 9ec:	20 95       	com	r18
 9ee:	82 23       	and	r24, r18
 9f0:	8c 93       	st	X, r24
		*out |= bit;
 9f2:	88 81       	ld	r24, Y
 9f4:	84 2b       	or	r24, r20
 9f6:	88 83       	st	Y, r24
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <pinMode+0x68>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
 9fa:	84 2b       	or	r24, r20
 9fc:	8c 93       	st	X, r24
		SREG = oldSREG;
 9fe:	9f bf       	out	0x3f, r25	; 63
	}
}
 a00:	df 91       	pop	r29
 a02:	cf 91       	pop	r28
 a04:	08 95       	ret

00000a06 <__udivmodsi4>:
 a06:	a1 e2       	ldi	r26, 0x21	; 33
 a08:	1a 2e       	mov	r1, r26
 a0a:	aa 1b       	sub	r26, r26
 a0c:	bb 1b       	sub	r27, r27
 a0e:	fd 01       	movw	r30, r26
 a10:	0d c0       	rjmp	.+26     	; 0xa2c <__udivmodsi4_ep>

00000a12 <__udivmodsi4_loop>:
 a12:	aa 1f       	adc	r26, r26
 a14:	bb 1f       	adc	r27, r27
 a16:	ee 1f       	adc	r30, r30
 a18:	ff 1f       	adc	r31, r31
 a1a:	a2 17       	cp	r26, r18
 a1c:	b3 07       	cpc	r27, r19
 a1e:	e4 07       	cpc	r30, r20
 a20:	f5 07       	cpc	r31, r21
 a22:	20 f0       	brcs	.+8      	; 0xa2c <__udivmodsi4_ep>
 a24:	a2 1b       	sub	r26, r18
 a26:	b3 0b       	sbc	r27, r19
 a28:	e4 0b       	sbc	r30, r20
 a2a:	f5 0b       	sbc	r31, r21

00000a2c <__udivmodsi4_ep>:
 a2c:	66 1f       	adc	r22, r22
 a2e:	77 1f       	adc	r23, r23
 a30:	88 1f       	adc	r24, r24
 a32:	99 1f       	adc	r25, r25
 a34:	1a 94       	dec	r1
 a36:	69 f7       	brne	.-38     	; 0xa12 <__udivmodsi4_loop>
 a38:	60 95       	com	r22
 a3a:	70 95       	com	r23
 a3c:	80 95       	com	r24
 a3e:	90 95       	com	r25
 a40:	9b 01       	movw	r18, r22
 a42:	ac 01       	movw	r20, r24
 a44:	bd 01       	movw	r22, r26
 a46:	cf 01       	movw	r24, r30
 a48:	08 95       	ret

00000a4a <__tablejump2__>:
 a4a:	ee 0f       	add	r30, r30
 a4c:	ff 1f       	adc	r31, r31

00000a4e <__tablejump__>:
 a4e:	05 90       	lpm	r0, Z+
 a50:	f4 91       	lpm	r31, Z+
 a52:	e0 2d       	mov	r30, r0
 a54:	09 94       	ijmp

00000a56 <_exit>:
 a56:	f8 94       	cli

00000a58 <__stop_program>:
 a58:	ff cf       	rjmp	.-2      	; 0xa58 <__stop_program>
